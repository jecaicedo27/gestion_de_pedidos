/**
 * Script de inicio completo de la aplicaci√≥n con AutoSync habilitado
 */

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ Iniciando Sistema de Gesti√≥n de Pedidos con AutoSync...\n');

// Funci√≥n para iniciar el backend
function startBackend() {
    return new Promise((resolve, reject) => {
        console.log('‚öôÔ∏è Iniciando servidor backend...');
        
        const backendProcess = spawn('node', ['server.js'], {
            cwd: path.join(__dirname, 'backend'),
            stdio: 'inherit',
            shell: true
        });

        backendProcess.on('error', (error) => {
            console.error('‚ùå Error iniciando backend:', error);
            reject(error);
        });

        // Dar tiempo para que el servidor se inicie
        setTimeout(() => {
            console.log('‚úÖ Backend iniciado correctamente');
            resolve(backendProcess);
        }, 3000);
    });
}

// Funci√≥n para iniciar el frontend
function startFrontend() {
    return new Promise((resolve, reject) => {
        console.log('üñ•Ô∏è Iniciando aplicaci√≥n frontend...');
        
        const frontendProcess = spawn('npm', ['start'], {
            cwd: path.join(__dirname, 'frontend'),
            stdio: 'inherit',
            shell: true
        });

        frontendProcess.on('error', (error) => {
            console.error('‚ùå Error iniciando frontend:', error);
            reject(error);
        });

        // Dar tiempo para que React se compile e inicie
        setTimeout(() => {
            console.log('‚úÖ Frontend iniciado correctamente');
            resolve(frontendProcess);
        }, 8000);
    });
}

// Funci√≥n principal
async function startApplication() {
    try {
        console.log('üìã Configuraci√≥n del sistema:');
        console.log('   üîÑ AutoSync SIIGO: Habilitado (cada 5 minutos)');
        console.log('   üì¶ Sincronizaci√≥n de productos: Autom√°tica');
        console.log('   üí∞ Sincronizaci√≥n de precios: Autom√°tica');
        console.log('   üìä Sincronizaci√≥n de estados: Autom√°tica');
        console.log('   üìù Logs de sincronizaci√≥n: Habilitados\n');
        
        // Iniciar backend primero
        const backendProcess = await startBackend();
        
        // Luego iniciar frontend
        const frontendProcess = await startFrontend();
        
        console.log('\nüéâ ¬°Sistema completo iniciado exitosamente!');
        console.log('üìç Backend: http://localhost:3001');
        console.log('üåê Frontend: http://localhost:3000');
        console.log('\nüîÑ El AutoSync se ejecutar√° autom√°ticamente cada 5 minutos');
        console.log('üìä Los cambios en SIIGO se reflejar√°n autom√°ticamente en la aplicaci√≥n');
        
        // Manejar cierre limpio
        process.on('SIGINT', () => {
            console.log('\nüõë Cerrando aplicaci√≥n...');
            backendProcess.kill();
            frontendProcess.kill();
            process.exit(0);
        });

        process.on('SIGTERM', () => {
            console.log('\nüõë Cerrando aplicaci√≥n...');
            backendProcess.kill();
            frontendProcess.kill();
            process.exit(0);
        });
        
    } catch (error) {
        console.error('‚ùå Error iniciando la aplicaci√≥n:', error);
        process.exit(1);
    }
}

// Iniciar aplicaci√≥n
startApplication();
