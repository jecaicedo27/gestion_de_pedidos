const { query } = require('./backend/config/database');

async function fixEnumDeliveryMethod() {
  console.log('üîß Corrigiendo delivery_method con valor ENUM v√°lido...\n');

  try {
    // Actualizar con valor v√°lido del ENUM
    console.log('üìù Actualizando a "mensajeria_urbana" (valor v√°lido del ENUM)');
    const updateResult = await query(`
      UPDATE orders 
      SET delivery_method = 'mensajeria_urbana' 
      WHERE id = 126
    `);
    
    console.log(`‚úÖ Filas afectadas: ${updateResult.affectedRows}`);
    console.log(`‚úÖ Changed rows: ${updateResult.changedRows}`);

    // Verificar la correcci√≥n
    console.log('\nüîç Verificando despu√©s del UPDATE:');
    const verifyOrder = await query(`
      SELECT 
        o.id,
        o.order_number,
        o.customer_name,
        o.status,
        o.delivery_method,
        o.assigned_messenger_id,
        o.messenger_status,
        u.username as messenger_name,
        u.full_name as messenger_full_name
      FROM orders o
      LEFT JOIN users u ON o.assigned_messenger_id = u.id
      WHERE o.id = 126
    `);

    if (verifyOrder.length) {
      const order = verifyOrder[0];
      console.log('üì¶ PEDIDO CORREGIDO:');
      console.log(`   üìã N√∫mero: ${order.order_number}`);
      console.log(`   üë§ Cliente: ${order.customer_name}`);
      console.log(`   üìç Estado: ${order.status}`);
      console.log(`   üöö M√©todo: "${order.delivery_method}"`);
      console.log(`   üë®‚Äçüíº Mensajero: ${order.messenger_full_name || order.messenger_name} (ID: ${order.assigned_messenger_id})`);
      console.log(`   üì± Messenger Status: ${order.messenger_status}`);

      // Verificar condiciones FINALES
      const conditions = {
        'assigned_messenger_id existe': order.assigned_messenger_id ? '‚úÖ' : '‚ùå',
        'messenger_status es "assigned"': order.messenger_status === 'assigned' ? '‚úÖ' : '‚ùå',
        'delivery_method apropiado': ['mensajeria_local', 'domicilio', 'mensajeria_urbana'].includes(order.delivery_method) ? '‚úÖ' : '‚ùå',
        'status apropiado': order.status === 'listo_para_entrega' ? '‚úÖ' : '‚ùå'
      };

      console.log('\nüéØ CONDICIONES PARA BOT√ìN "ACEPTAR":');
      Object.entries(conditions).forEach(([condition, status]) => {
        console.log(`   ${status} ${condition}`);
      });

      const allConditionsMet = Object.values(conditions).every(status => status === '‚úÖ');
      
      if (allConditionsMet) {
        console.log('\nüéâ ¬°TODAS LAS CONDICIONES CUMPLIDAS!');
        console.log('‚úÖ El mensajero AHORA S√ç deber√≠a ver el bot√≥n "Aceptar"');
        console.log(`üì≤ Pedido: ${order.order_number}`);
        console.log('üîë Iniciar sesi√≥n como mensajero1 (ID: 15)');
        console.log('üìç El pedido deber√≠a aparecer en la lista con bot√≥n "Aceptar"');
        
        // Mostrar informaci√≥n de login
        console.log('\nüîê INSTRUCCIONES DE ACCESO:');
        console.log('1. Ir a la aplicaci√≥n web');
        console.log('2. Iniciar sesi√≥n con usuario mensajero (ID: 15)');
        console.log(`3. Buscar el pedido: ${order.order_number}`);
        console.log('4. Deber√≠a aparecer el bot√≥n "Aceptar" (‚úÖ)');
      } else {
        console.log('\n‚ùå A√∫n faltan condiciones por cumplir');
      }
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

// Ejecutar
if (require.main === module) {
  fixEnumDeliveryMethod().then(() => {
    console.log('\nüèÅ Correcci√≥n completada');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  });
}

module.exports = { fixEnumDeliveryMethod };
