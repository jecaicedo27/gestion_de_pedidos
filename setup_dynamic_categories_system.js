const { pool } = require('./backend/config/database');
const categoryService = require('./backend/services/categoryService');
const { createCategoriesTable } = require('./database/create_categories_table');

async function setupDynamicCategoriesSystem() {
    try {
        console.log('üîß Configurando Sistema de Categor√≠as Din√°micas...');
        console.log('=' .repeat(60));

        // 1. Crear tablas necesarias
        console.log('üìã Paso 1: Creando tablas...');
        await createCategoriesTable();

        // 2. Sincronizar categor√≠as desde SIIGO
        console.log('\nüìã Paso 2: Sincronizando categor√≠as desde SIIGO...');
        const syncResult = await categoryService.syncCategoriesFromSiigo();
        
        if (syncResult.success) {
            console.log(`‚úÖ Sincronizaci√≥n exitosa:`);
            console.log(`   üÜï ${syncResult.categoriesCreated} categor√≠as creadas`);
            console.log(`   üîÑ ${syncResult.categoriesUpdated} categor√≠as actualizadas`);
            console.log(`   ‚ùå ${syncResult.errors} errores`);
        } else {
            console.log(`‚ùå Error en sincronizaci√≥n: ${syncResult.error}`);
        }

        // 3. Verificar categor√≠as activas
        console.log('\nüìã Paso 3: Verificando categor√≠as activas...');
        const activeCategories = await categoryService.getActiveCategories();
        console.log(`üìÇ ${activeCategories.length} categor√≠as activas encontradas:`);
        
        activeCategories.forEach((cat, index) => {
            console.log(`   ${index + 1}. ${cat.label} (${cat.count} productos)`);
        });

        // 4. Obtener estad√≠sticas
        console.log('\nüìã Paso 4: Estad√≠sticas del sistema...');
        const stats = await categoryService.getSyncStats();
        
        if (stats.summary) {
            console.log(`üìä Resumen:`);
            console.log(`   üìÇ Total categor√≠as: ${stats.summary.total_categories}`);
            console.log(`   ‚úÖ Categor√≠as activas: ${stats.summary.active_categories}`);
            console.log(`   üîÑ Sincronizadas: ${stats.summary.synced_categories}`);
        }

        if (stats.recentSyncs && stats.recentSyncs.length > 0) {
            console.log(`\nüìä √öltimas sincronizaciones:`);
            stats.recentSyncs.forEach((sync, index) => {
                const date = new Date(sync.sync_date).toLocaleString('es-CO');
                console.log(`   ${index + 1}. ${date} - Creadas: ${sync.categories_created}, Actualizadas: ${sync.categories_updated}, Errores: ${sync.errors}`);
            });
        }

        // 5. Probar endpoints API
        console.log('\nüìã Paso 5: Testing endpoints...');
        console.log('‚úÖ Los siguientes endpoints est√°n disponibles:');
        console.log('   GET /api/products/categories - Obtener categor√≠as din√°micas');
        console.log('   POST /api/products/sync-categories - Sincronizaci√≥n manual');
        console.log('   GET /api/products/categories/sync-stats - Estad√≠sticas de sincronizaci√≥n');

        console.log('\n' + '='.repeat(60));
        console.log('üéâ Sistema de Categor√≠as Din√°micas configurado exitosamente!');
        console.log('\nüîß BENEFICIOS PARA LA ESCALABILIDAD:');
        console.log('‚úÖ Categor√≠as se sincronizan autom√°ticamente desde SIIGO');
        console.log('‚úÖ No hay categor√≠as hardcodeadas - totalmente din√°mico');
        console.log('‚úÖ Compatible con cualquier empresa que use SIIGO');
        console.log('‚úÖ Sincronizaci√≥n autom√°tica cada hora (configurable)');
        console.log('‚úÖ Logs y estad√≠sticas completas');
        console.log('‚úÖ Sistema escalable y vendible a otras empresas');
        
        console.log('\nüí° NOTAS IMPORTANTES:');
        console.log('‚Ä¢ Las categor√≠as se actualizan autom√°ticamente cada hora');
        console.log('‚Ä¢ Si una empresa tiene categor√≠as diferentes en SIIGO, se sincronizar√°n autom√°ticamente');
        console.log('‚Ä¢ El sistema mantiene historial de todas las sincronizaciones');
        console.log('‚Ä¢ No se requiere configuraci√≥n manual de categor√≠as');

    } catch (error) {
        console.error('‚ùå Error configurando sistema de categor√≠as:', error);
        throw error;
    } finally {
        await pool.end();
        console.log('\nüîå Conexi√≥n a base de datos cerrada');
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    setupDynamicCategoriesSystem()
        .then(() => {
            console.log('\n‚úÖ Setup completado exitosamente');
            process.exit(0);
        })
        .catch(error => {
            console.error('\n‚ùå Error en setup:', error);
            process.exit(1);
        });
}

module.exports = { setupDynamicCategoriesSystem };
