const axios = require('axios');

async function testIntegratedLoadProductsButton() {
    console.log('üß™ PROBANDO BOT√ìN "CARGAR PRODUCTOS" INTEGRADO');
    console.log('=====================================');

    try {
        // Simular login para obtener token
        console.log('üîë Autenticando usuario...');
        const loginResponse = await axios.post('http://localhost:3001/api/auth/login', {
            username: 'admin',
            password: 'admin123'
        });

        const token = loginResponse.data.token;
        console.log('‚úÖ Usuario autenticado exitosamente');

        // Probar el endpoint de carga completa de productos
        console.log('\nüöÄ Probando endpoint POST /api/products/load-from-siigo');
        console.log('   (Esto ejecutar√° nuestra importaci√≥n completa con c√≥digos temporales)');

        const startTime = Date.now();
        
        const loadResponse = await axios.post('http://localhost:3001/api/products/load-from-siigo', {}, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            timeout: 300000 // 5 minutos de timeout
        });

        const endTime = Date.now();
        const duration = Math.round((endTime - startTime) / 1000);

        if (loadResponse.data.success) {
            console.log('\nüéâ ¬°IMPORTACI√ìN COMPLETA EXITOSA!');
            console.log('=====================================');
            console.log(`‚è±Ô∏è Duraci√≥n: ${duration} segundos`);
            console.log(`üì¶ Total productos: ${loadResponse.data.data.total_products}`);
            console.log(`‚úÖ Productos importados: ${loadResponse.data.data.imported_products}`);
            console.log(`üè∑Ô∏è C√≥digos de barras reales: ${loadResponse.data.data.real_barcodes}`);
            console.log(`üîß C√≥digos temporales generados: ${loadResponse.data.data.temp_barcodes}`);
            console.log(`üìÇ Categor√≠as creadas: ${loadResponse.data.data.categories_created}`);
            
            console.log('\nüìã CATEGOR√çAS IMPORTADAS:');
            if (loadResponse.data.data.categories && Array.isArray(loadResponse.data.data.categories)) {
                loadResponse.data.data.categories.forEach((category, index) => {
                    console.log(`   ${index + 1}. ${category}`);
                });
            }

            console.log(`\nüí¨ Mensaje del servidor:`);
            console.log(`   ${loadResponse.data.message}`);

            // Verificar que el frontend recibir√° los datos correctamente
            console.log('\nüîç VERIFICACI√ìN FRONTEND:');
            console.log('‚úÖ Campo success:', loadResponse.data.success);
            console.log('‚úÖ Campo message:', !!loadResponse.data.message);
            console.log('‚úÖ Campo data.total_processed:', loadResponse.data.data.total_processed);
            console.log('‚úÖ Campo data.inserted:', loadResponse.data.data.inserted);
            console.log('‚úÖ Campo data.updated:', loadResponse.data.data.updated);
            console.log('‚úÖ Campo data.errors:', loadResponse.data.data.errors);

            // Probar endpoint de productos para ver si est√°n cargados
            console.log('\nüìã Verificando productos cargados...');
            const productsResponse = await axios.get('http://localhost:3001/api/products?page=1&pageSize=5', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (productsResponse.data.success && productsResponse.data.data.length > 0) {
                console.log(`‚úÖ ${productsResponse.data.pagination.totalItems} productos encontrados en la base de datos`);
                console.log('\nüìù MUESTRA DE PRODUCTOS CARGADOS:');
                productsResponse.data.data.slice(0, 3).forEach((product, index) => {
                    console.log(`   ${index + 1}. ${product.product_name}`);
                    console.log(`      C√≥digo: ${product.barcode}`);
                    console.log(`      Categor√≠a: ${product.category}`);
                    console.log(`      Precio: $${product.standard_price}`);
                    console.log('');
                });
            }

            // Probar endpoint de categor√≠as
            console.log('üìÇ Verificando categor√≠as cargadas...');
            const categoriesResponse = await axios.get('http://localhost:3001/api/products/categories', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (categoriesResponse.data.success) {
                console.log(`‚úÖ ${categoriesResponse.data.data.length} categor√≠as disponibles para el filtro frontend`);
            }

            console.log('\nüéØ INTEGRACI√ìN EXITOSA');
            console.log('======================');
            console.log('‚úÖ El bot√≥n "Cargar Productos" ahora usa la importaci√≥n completa');
            console.log('‚úÖ Se importan TODOS los productos de SIIGO');
            console.log('‚úÖ Se generan c√≥digos temporales para productos sin barcode');
            console.log('‚úÖ Se crean todas las categor√≠as din√°micamente');
            console.log('‚úÖ Frontend compatible con la respuesta del endpoint');
            console.log('‚úÖ Sistema escalable para cualquier empresa');

        } else {
            console.log('‚ùå Error en la importaci√≥n:');
            console.log(loadResponse.data.message);
        }

    } catch (error) {
        console.error('‚ùå Error en la prueba:', error.message);
        if (error.response) {
            console.error('Status:', error.response.status);
            console.error('Data:', error.response.data);
        }
    }
}

// Ejecutar la prueba
testIntegratedLoadProductsButton().then(() => {
    console.log('\n‚úÖ Prueba completada');
    process.exit(0);
}).catch(error => {
    console.error('‚ùå Error en la prueba:', error);
    process.exit(1);
});
