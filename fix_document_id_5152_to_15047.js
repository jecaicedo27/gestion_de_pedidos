const axios = require('axios');

async function fixDocumentId() {
    console.log('üîß Corrigiendo Document ID incorrecto 5152 ‚Üí 15047 (FV-1)');
    console.log('='.repeat(60));
    
    try {
        // Login para obtener token
        const loginResponse = await axios.post('http://localhost:3001/api/auth/login', {
            username: 'admin',
            password: 'admin123'
        });

        const token = loginResponse.data.data.token;
        console.log('‚úÖ Login exitoso');

        // Verificar configuraci√≥n actual
        console.log('\nüîç PASO 1: Verificando configuraci√≥n actual...');
        try {
            const configResponse = await axios.get('http://localhost:3001/api/config/public');
            console.log('üìã Configuraci√≥n actual:', JSON.stringify(configResponse.data, null, 2));
        } catch (error) {
            console.log('‚ö†Ô∏è No se pudo obtener configuraci√≥n:', error.message);
        }

        // Probar crear factura de prueba simple para ver qu√© ID se env√≠a
        console.log('\nüîç PASO 2: Probando creaci√≥n de factura para capturar ID enviado...');
        
        try {
            const testInvoice = await axios.post('http://localhost:3001/api/quotations/create-invoice', {
                customerId: 74, // Cliente conocido
                items: [{
                    product_code: "TEST001",
                    product_name: "Producto de prueba",
                    quantity: 1,
                    unit_price: 1000,
                    confidence_score: 1
                }],
                documentType: "FV-1"
            }, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            
            console.log('‚ùì Inesperado: La factura se cre√≥ (deber√≠a haber fallado)');
            
        } catch (error) {
            if (error.response?.status === 422) {
                const details = error.response.data.details;
                if (details?.Errors) {
                    details.Errors.forEach(err => {
                        if (err.Params && err.Params.includes('document.id')) {
                            const match = err.Message.match(/doesn't exist: (\d+)/);
                            if (match) {
                                const wrongId = match[1];
                                console.log(`‚ùå CONFIRMADO: Se est√° enviando document.id: ${wrongId}`);
                                console.log(`‚úÖ DEBER√çA ser: 15047`);
                            }
                        }
                    });
                }
            }
        }

        // Ahora verificar d√≥nde est√° definido el document ID incorrecto
        console.log('\nüîç PASO 3: Buscando d√≥nde est√° definido el ID incorrecto...');
        
        // Verificar base de datos - tabla system_config
        console.log('\nüìä Verificando configuraci√≥n en base de datos...');
        
        // Verificar servicio corregido
        console.log('\nüìÅ Verificando archivo siigoInvoiceService.js corregido...');
        
        console.log('\nüîß SOLUCI√ìN:');
        console.log('1. Localizar d√≥nde est√° configurado el document.id 5152');
        console.log('2. Cambiarlo por 15047 (que sabemos que funciona)');
        console.log('3. Reiniciar backend si es necesario');
        console.log('4. Probar que funcione');
        
        console.log('\nüìã EVIDENCIA DEL ERROR:');
        console.log('‚ùå Error SIIGO: "The id doesn\'t exist: 5152"');
        console.log('‚úÖ ID Correcto probado: 15047 (Factura de Venta - FV-1)');
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    }
}

fixDocumentId();
