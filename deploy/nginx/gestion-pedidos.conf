# ============================================================
# Nginx site: gestion-pedidos (HTTP)
# Cómo usar en el VPS (copiar y pegar comandos):
#
# 1) Publicar el build del frontend
#    sudo mkdir -p /var/www/gestion-frontend
#    # Copia el build de React (ajusta la ruta del repo si es distinta)
#    # Ejemplo si el repo está en /opt/gestion_de_pedidos:
#    #   cd /opt/gestion_de_pedidos/frontend
#    #   npm ci && npm run build
#    #   sudo rm -rf /var/www/gestion-frontend/*
#    #   sudo cp -r build/* /var/www/gestion-frontend/
#    #   sudo chown -R www-data:www-data /var/www/gestion-frontend
#
# 2) Instalar este sitio
#    sudo cp gestion-pedidos.conf /etc/nginx/sites-available/gestion-pedidos.conf
#    sudo ln -sf /etc/nginx/sites-available/gestion-pedidos.conf /etc/nginx/sites-enabled/gestion-pedidos.conf
#    sudo rm -f /etc/nginx/sites-enabled/default
#
# 3) Verificar y recargar Nginx
#    sudo nginx -t && sudo systemctl reload nginx
#
# 4) Backend con PM2 (asegúrate que corra en el puerto 3001 o ajusta abajo)
#    pm2 status
#    # Si no está:
#    #   pm2 start ecosystem.config.js --env production
#    #   pm2 save
#
# 5) Validar:
#    - Frontend: http://46.202.93.54/
#    - API:      http://46.202.93.54/api/health (debe devolver JSON success: true)
#
# NOTA 502 Bad Gateway en /api/health:
#    - Indica que Nginx no puede alcanzar el backend.
#    - Ajusta la línea 'server 127.0.0.1:3001;' al puerto real del backend.
#    - Verifica que PM2 lo esté ejecutando y escuchando en localhost.
# ============================================================

upstream pedidos_backend {
    # AJUSTA ESTE PUERTO SI TU BACKEND NO ESTÁ EN 3001
    server 127.0.0.1:3001;
    keepalive 64;
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    # Permite subir archivos (logo, evidencias, etc.)
    client_max_body_size 20M;

    # Frontend estático (SPA)
    root /var/www/gestion-frontend;
    index index.html;

    # Servir SPA (todas las rutas van al mismo index.html)
    location / {
        try_files $uri /index.html;
    }

    # API hacia backend Node
    location /api/ {
        proxy_pass http://pedidos_backend;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Mantener conexiones HTTP/1.1 sin forzar 'close'
        proxy_set_header Connection "";
        proxy_buffering off;
    }

    # WebSockets (Socket.IO)
    location /socket.io/ {
        proxy_pass http://pedidos_backend;
        proxy_http_version 1.1;

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Estáticos con cache
    # Servir /uploads desde el backend (evita conflictos con el bloque de estáticos del frontend)
    location ^~ /uploads/ {
        proxy_pass http://pedidos_backend;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        expires 7d;
        add_header Cache-Control "public, max-age=604800, immutable";
    }

    location ~* \.(?:js|css|woff2?|ttf|eot|ico|svg|gif|jpg|jpeg|png)$ {
        expires 7d;
        add_header Cache-Control "public, max-age=604800, immutable";
        try_files $uri /index.html;
    }
}
