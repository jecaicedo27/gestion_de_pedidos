const path = require('path');

// Cargar variables de entorno ANTES de importar los servicios
require('dotenv').config({ path: path.join(__dirname, 'backend', '.env') });

const { query } = require('./backend/config/database');

console.log('ü§ñ PROBANDO CONEXI√ìN CON CHATGPT ASSISTANT');
console.log('===========================================');

async function testChatGPTAssistantConnection() {
  try {
    console.log('üìã 1. VERIFICANDO VARIABLES DE ENTORNO:');
    console.log(`   ‚úì OPENAI_API_KEY: ${process.env.OPENAI_API_KEY ? '‚úÖ Configurado (' + process.env.OPENAI_API_KEY.substring(0, 20) + '...)' : '‚ùå No configurado'}`);
    console.log(`   ‚úì USE_CUSTOM_ASSISTANT: ${process.env.USE_CUSTOM_ASSISTANT || '‚ùå No configurado'}`);
    console.log(`   ‚úì CUSTOM_GPT_ASSISTANT_ID: ${process.env.CUSTOM_GPT_ASSISTANT_ID || '‚ùå No configurado'}`);
    console.log();

    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY no est√° configurado en las variables de entorno');
    }

    if (!process.env.CUSTOM_GPT_ASSISTANT_ID) {
      throw new Error('CUSTOM_GPT_ASSISTANT_ID no est√° configurado en las variables de entorno');
    }

    // Importar el servicio DESPU√âS de cargar las variables de entorno
    delete require.cache[require.resolve('./backend/services/chatgptService.js')];
    const chatgptService = require('./backend/services/chatgptService.js');
    
    console.log('üîß 2. CONFIGURACI√ìN DEL SERVICIO CHATGPT:');
    console.log(`   ‚úì API Key definido: ${chatgptService.apiKey ? '‚úÖ S√≠' : '‚ùå No'}`);
    console.log(`   ‚úì Custom Assistant habilitado: ${chatgptService.useCustomAssistant ? '‚úÖ S√≠' : '‚ùå No'}`);
    console.log(`   ‚úì Assistant ID: ${chatgptService.customAssistantId || '‚ùå No definido'}`);
    console.log();

    if (!chatgptService.apiKey) {
      throw new Error('El servicio ChatGPT no tiene API key configurada');
    }

    if (!chatgptService.useCustomAssistant) {
      throw new Error('El Custom Assistant no est√° habilitado en el servicio');
    }

    console.log('üß™ 3. PROBANDO CONEXI√ìN CON OPENAI ASSISTANT API:');
    
    // Probar conexi√≥n b√°sica con la API de OpenAI
    const testResponse = await fetch('https://api.openai.com/v1/assistants', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
        'OpenAI-Beta': 'assistants=v2'
      }
    });

    if (!testResponse.ok) {
      const errorData = await testResponse.json().catch(() => ({}));
      throw new Error(`Error conectando con OpenAI API: ${testResponse.status} - ${errorData.error?.message || 'Error desconocido'}`);
    }

    const assistants = await testResponse.json();
    console.log(`   ‚úÖ Conexi√≥n exitosa con OpenAI Assistants API`);
    console.log(`   ‚úÖ Assistants disponibles: ${assistants.data?.length || 0}`);
    
    // Buscar nuestro Assistant espec√≠fico
    const ourAssistant = assistants.data?.find(a => a.id === process.env.CUSTOM_GPT_ASSISTANT_ID);
    
    if (ourAssistant) {
      console.log(`   ‚úÖ Assistant encontrado: ${ourAssistant.name || 'Sin nombre'}`);
      console.log(`   ‚úÖ Modelo: ${ourAssistant.model}`);
      console.log(`   ‚úÖ Descripci√≥n: ${ourAssistant.description || 'Sin descripci√≥n'}`);
    } else {
      console.log(`   ‚ö†Ô∏è  Assistant ID ${process.env.CUSTOM_GPT_ASSISTANT_ID} no encontrado en la lista`);
      console.log('   üìã Assistants disponibles:');
      assistants.data?.slice(0, 3).forEach(a => {
        console.log(`      - ${a.id}: ${a.name || 'Sin nombre'}`);
      });
    }
    console.log();

    console.log('ü§ñ 4. PROBANDO PROCESAMIENTO DE PEDIDO COMPLETO:');
    
    const testOrder = "Hola, necesito para mi restaurante: 10 liquipops de maracuy√° de 350ml y 5 skarcha lim√≥n de 250g";
    console.log(`   üìù Pedido de prueba: "${testOrder}"`);
    console.log('   üîÑ Procesando con ChatGPT Assistant...');
    
    const startTime = Date.now();
    const result = await chatgptService.processNaturalLanguageOrder(null, testOrder);
    const endTime = Date.now();
    
    console.log('\n   üìä RESULTADO:');
    console.log(`   ‚úì √âxito: ${result.success ? '‚úÖ S√ç' : '‚ùå NO'}`);
    console.log(`   ‚úì Tiempo: ${endTime - startTime}ms`);
    console.log(`   ‚úì Tokens usados: ${result.tokensUsed || 0}`);
    
    if (result.success) {
      console.log(`   ‚úì Items procesados: ${result.processedOrder?.items?.length || 0}`);
      console.log(`   ‚úì Confianza: ${result.processedOrder?.confidence || 0}`);
      
      if (result.processedOrder?.items?.length > 0) {
        console.log('\n   üì¶ ITEMS PROCESADOS:');
        result.processedOrder.items.forEach((item, index) => {
          console.log(`      ${index + 1}. ${item.product_name}`);
          console.log(`         Cantidad: ${item.quantity} ${item.unit}`);
          console.log(`         Confianza: ${item.confidence}`);
          if (item.product_code) {
            console.log(`         C√≥digo: ${item.product_code}`);
          }
        });
      }
      
      console.log('\nüéâ ¬°CHATGPT ASSISTANT FUNCIONANDO CORRECTAMENTE!');
      console.log('===============================================');
      console.log('‚úÖ Conexi√≥n establecida exitosamente');
      console.log('‚úÖ Assistant personalizado respondiendo');
      console.log('‚úÖ Procesamiento de pedidos operativo');
      
    } else {
      console.log(`   ‚ùå Error: ${result.error}`);
      throw new Error(`Fallo en procesamiento: ${result.error}`);
    }

  } catch (error) {
    console.error('\nüí• ERROR EN LA PRUEBA:', error.message);
    console.log('\nüîß POSIBLES SOLUCIONES:');
    console.log('   1. Verificar que la API key sea v√°lida en OpenAI Platform');
    console.log('   2. Confirmar que el Assistant ID existe en tu cuenta');
    console.log('   3. Verificar que el Assistant tenga permisos adecuados');
    console.log('   4. Comprobar conexi√≥n a internet');
    console.log('   5. Revisar l√≠mites de cuota en OpenAI');
    
    return false;
  }
  
  return true;
}

// Funci√≥n para probar tambi√©n sin quotation_id (que causaba error de foreign key)
async function testDirectProcessing() {
  console.log('\nüß™ 5. PROBANDO PROCESAMIENTO DIRECTO (SIN QUOTATION):');
  
  try {
    // Importar el servicio DESPU√âS de cargar las variables de entorno
    delete require.cache[require.resolve('./backend/services/chatgptService.js')];
    const chatgptService = require('./backend/services/chatgptService.js');
    
    // Probar sin quotation_id para evitar problemas de foreign key
    const result = await chatgptService.processNaturalLanguageOrder(
      null, // No quotation_id
      'necesito 3 pitillos especiales y 2 liquipops fresa 350ml'
    );
    
    console.log(`   ‚úÖ Procesamiento directo: ${result.success ? 'EXITOSO' : 'FALL√ì'}`);
    
    if (result.success) {
      console.log(`   ‚úÖ Items encontrados: ${result.processedOrder?.items?.length || 0}`);
    } else {
      console.log(`   ‚ùå Error: ${result.error}`);
    }
    
  } catch (error) {
    console.log(`   ‚ùå Error en procesamiento directo: ${error.message}`);
  }
}

async function main() {
  const success = await testChatGPTAssistantConnection();
  
  if (success) {
    await testDirectProcessing();
    
    console.log('\nüèÅ PRUEBA COMPLETADA EXITOSAMENTE');
    console.log('================================');
    console.log('El sistema est√° listo para procesar pedidos con ChatGPT Assistant!');
  } else {
    console.log('\n‚ùå PRUEBA FALL√ì - Revisar configuraci√≥n');
  }
  
  process.exit(success ? 0 : 1);
}

main();
