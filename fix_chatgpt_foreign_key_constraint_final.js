const { query } = require('./backend/config/database');

async function fixChatGPTForeignKeyConstraint() {
  console.log('üîß Corrigiendo constraint de clave for√°nea en chatgpt_processing_log...\n');

  try {
    // PASO 1: Verificar la estructura actual de la tabla
    console.log('üìä 1. Verificando estructura de chatgpt_processing_log...');
    
    const tableExists = await query(`
      SELECT COUNT(*) as count 
      FROM information_schema.tables 
      WHERE table_schema = 'gestion_pedidos_dev' 
      AND table_name = 'chatgpt_processing_log'
    `);

    if (tableExists[0].count === 0) {
      console.log('   ‚ÑπÔ∏è La tabla chatgpt_processing_log no existe, cre√°ndola...');
      
      await query(`
        CREATE TABLE chatgpt_processing_log (
          id INT PRIMARY KEY AUTO_INCREMENT,
          quotation_id INT NULL,
          processing_id VARCHAR(255),
          original_request TEXT,
          processed_response TEXT,
          tokens_used INT DEFAULT 0,
          processing_time_ms INT DEFAULT 0,
          success BOOLEAN DEFAULT TRUE,
          error_message TEXT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          FOREIGN KEY (quotation_id) REFERENCES quotations(id) ON DELETE SET NULL ON UPDATE CASCADE
        )
      `);
      
      console.log('   ‚úÖ Tabla chatgpt_processing_log creada exitosamente');
      return;
    }

    // PASO 2: Verificar si hay constraint problem√°tico
    console.log('üìä 2. Verificando constraints existentes...');
    
    const constraints = await query(`
      SELECT 
        CONSTRAINT_NAME,
        COLUMN_NAME,
        REFERENCED_TABLE_NAME,
        REFERENCED_COLUMN_NAME
      FROM information_schema.KEY_COLUMN_USAGE 
      WHERE table_schema = 'gestion_pedidos_dev' 
      AND table_name = 'chatgpt_processing_log'
      AND REFERENCED_TABLE_NAME IS NOT NULL
    `);

    console.log(`   ‚ÑπÔ∏è Encontrados ${constraints.length} constraints de clave for√°nea`);

    // PASO 3: Eliminar constraint problem√°tico si existe
    for (let constraint of constraints) {
      if (constraint.CONSTRAINT_NAME.includes('chatgpt_processing_log_ibfk_1')) {
        console.log(`   üîß Eliminando constraint problem√°tico: ${constraint.CONSTRAINT_NAME}`);
        
        await query(`
          ALTER TABLE chatgpt_processing_log 
          DROP FOREIGN KEY ${constraint.CONSTRAINT_NAME}
        `);
        
        console.log('   ‚úÖ Constraint problem√°tico eliminado');
      }
    }

    // PASO 4: Limpiar registros con quotation_id inv√°lidos
    console.log('üßπ 3. Limpiando registros con quotation_id inv√°lidos...');
    
    const invalidRecords = await query(`
      SELECT COUNT(*) as count
      FROM chatgpt_processing_log cpl
      WHERE cpl.quotation_id IS NOT NULL 
      AND cpl.quotation_id NOT IN (SELECT id FROM quotations)
    `);

    if (invalidRecords[0].count > 0) {
      console.log(`   ‚ö†Ô∏è Encontrados ${invalidRecords[0].count} registros con quotation_id inv√°lidos`);
      
      await query(`
        UPDATE chatgpt_processing_log 
        SET quotation_id = NULL 
        WHERE quotation_id IS NOT NULL 
        AND quotation_id NOT IN (SELECT id FROM quotations)
      `);
      
      console.log('   ‚úÖ Registros con quotation_id inv√°lidos actualizados a NULL');
    } else {
      console.log('   ‚úÖ No se encontraron registros con quotation_id inv√°lidos');
    }

    // PASO 5: Recrear constraint con configuraci√≥n correcta
    console.log('üîß 4. Recreando constraint con configuraci√≥n segura...');
    
    await query(`
      ALTER TABLE chatgpt_processing_log 
      ADD CONSTRAINT fk_chatgpt_quotation
      FOREIGN KEY (quotation_id) REFERENCES quotations(id) 
      ON DELETE SET NULL 
      ON UPDATE CASCADE
    `);
    
    console.log('   ‚úÖ Nuevo constraint creado: fk_chatgpt_quotation');

    // PASO 6: Verificar que todo funcione correctamente
    console.log('üß™ 5. Verificando funcionamiento del constraint...');
    
    const testConstraints = await query(`
      SELECT 
        CONSTRAINT_NAME,
        COLUMN_NAME,
        REFERENCED_TABLE_NAME,
        REFERENCED_COLUMN_NAME,
        DELETE_RULE,
        UPDATE_RULE
      FROM information_schema.REFERENTIAL_CONSTRAINTS rc
      JOIN information_schema.KEY_COLUMN_USAGE kcu 
        ON rc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
      WHERE rc.CONSTRAINT_SCHEMA = 'gestion_pedidos_dev' 
      AND rc.TABLE_NAME = 'chatgpt_processing_log'
    `);

    if (testConstraints.length > 0) {
      console.log('   ‚úÖ Constraint verificado exitosamente:');
      testConstraints.forEach(constraint => {
        console.log(`      ‚Ä¢ ${constraint.CONSTRAINT_NAME}: ${constraint.DELETE_RULE}/${constraint.UPDATE_RULE}`);
      });
    }

    console.log('\nüéØ Correcci√≥n completada exitosamente:');
    console.log('   ‚Ä¢ Constraint de clave for√°nea corregido');
    console.log('   ‚Ä¢ quotation_id puede ser NULL (opcional)');
    console.log('   ‚Ä¢ ON DELETE SET NULL para evitar errores');
    console.log('   ‚Ä¢ ON UPDATE CASCADE para mantener consistencia');
    console.log('   ‚Ä¢ ChatGPT puede funcionar sin quotation_id espec√≠fico');

  } catch (error) {
    console.error('‚ùå Error corrigiendo constraint:', error.message);
    
    // Soluci√≥n de respaldo: hacer quotation_id opcional
    try {
      console.log('\nüÜò Aplicando soluci√≥n de respaldo...');
      
      await query(`
        ALTER TABLE chatgpt_processing_log 
        MODIFY quotation_id INT NULL
      `);
      
      console.log('   ‚úÖ quotation_id configurado como opcional (NULL)');
    } catch (backupError) {
      console.error('   ‚ùå Error en soluci√≥n de respaldo:', backupError.message);
    }
  }
}

// Ejecutar la correcci√≥n
fixChatGPTForeignKeyConstraint()
  .then(() => {
    console.log('\n‚úÖ Proceso completado');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå Error en el proceso:', error);
    process.exit(1);
  });
