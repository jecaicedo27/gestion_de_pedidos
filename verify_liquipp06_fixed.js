const mysql = require('mysql2/promise');

const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'gestion_pedidos_dev',
    port: process.env.DB_PORT || 3306
};

async function verifyLiquipp06Fixed() {
    let connection;
    try {
        console.log('üîç Verificando el producto LIQUIPP06 despu√©s de la migraci√≥n...');
        
        connection = await mysql.createConnection(dbConfig);
        
        // Buscar el producto LIQUIPP06
        const [products] = await connection.execute(`
            SELECT id, product_name, barcode, siigo_product_id, internal_code, category, is_active
            FROM products 
            WHERE internal_code = 'LIQUIPP06'
        `);
        
        if (products.length === 0) {
            console.log('‚ùå No se encontr√≥ producto LIQUIPP06 despu√©s de la migraci√≥n');
            return;
        }
        
        const product = products[0];
        console.log('\nüì¶ PRODUCTO LIQUIPP06 DESPU√âS DE LA MIGRACI√ìN:');
        console.log(`   üÜî ID: ${product.id}`);
        console.log(`   üìù Nombre: ${product.product_name}`);
        console.log(`   üìß C√≥digo de barras: ${product.barcode}`);
        console.log(`   üåê SIIGO ID: ${product.siigo_product_id}`);
        console.log(`   üî¢ C√≥digo interno: ${product.internal_code}`);
        console.log(`   üìÇ Categor√≠a: ${product.category}`);
        console.log(`   ‚úÖ Activo: ${product.is_active ? 'S√≠' : 'No'}`);
        
        // Verificar si ahora tiene el c√≥digo correcto
        if (product.barcode === '7709717533940') {
            console.log('\nüéâ ¬°√âXITO! El producto LIQUIPP06 ahora tiene su c√≥digo de barras correcto');
            console.log('‚ú® C√≥digo corregido: 7709717533940 (extra√≠do de additional_fields.barcode en SIIGO)');
            console.log('üí° El sistema ahora busca c√≥digos de barras en m√∫ltiples campos de SIIGO');
        } else if (product.barcode.startsWith('PENDIENTE_')) {
            console.log('\n‚ö†Ô∏è  El producto sigue marcado como PENDIENTE');
            console.log('üîç Esto significa que no se encontr√≥ c√≥digo de barras en ning√∫n campo de SIIGO');
            console.log('   - Campo principal: product.barcode');
            console.log('   - Campo adicional: product.additional_fields.barcode'); 
            console.log('   - Metadata (legacy)');
        } else {
            console.log(`\n‚úÖ El producto tiene c√≥digo de barras: ${product.barcode}`);
        }
        
        // Mostrar estad√≠sticas generales de la migraci√≥n
        console.log('\nüìä ESTAD√çSTICAS GENERALES DE LA MIGRACI√ìN:');
        
        const [totalStats] = await connection.execute(`
            SELECT 
                COUNT(*) as total_productos,
                COUNT(CASE WHEN barcode NOT LIKE 'PENDIENTE_%' THEN 1 END) as con_codigo,
                COUNT(CASE WHEN barcode LIKE 'PENDIENTE_%' THEN 1 END) as pendientes
            FROM products
        `);
        
        const stats = totalStats[0];
        console.log(`   üì¶ Total productos: ${stats.total_productos}`);
        console.log(`   ‚úÖ Con c√≥digo de barras: ${stats.con_codigo}`);
        console.log(`   ‚è≥ Pendientes: ${stats.pendientes}`);
        console.log(`   üìä Porcentaje con c√≥digos: ${((stats.con_codigo / stats.total_productos) * 100).toFixed(1)}%`);
        
        // Mostrar algunos ejemplos de productos con c√≥digos reales
        console.log('\nüìß PRODUCTOS CON C√ìDIGOS DE BARRAS REALES:');
        const [withBarcodes] = await connection.execute(`
            SELECT internal_code, product_name, barcode
            FROM products 
            WHERE barcode NOT LIKE 'PENDIENTE_%'
            ORDER BY internal_code
            LIMIT 10
        `);
        
        withBarcodes.forEach(prod => {
            console.log(`   ‚úÖ ${prod.internal_code}: ${prod.barcode}`);
        });
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

// Ejecutar verificaci√≥n
verifyLiquipp06Fixed();
