# ================================================
# CONFIGURACIÓN DEL SERVIDOR (PRODUCCIÓN)
# ================================================
PORT=3001
NODE_ENV=production

# ================================================
# BASE DE DATOS MySQL (PRODUCCIÓN)
# ================================================
DB_HOST=prod-db-hostname
DB_PORT=3306
DB_USER=prod_db_user
DB_PASSWORD=REEMPLAZAR_CON_PASSWORD_SEGURA
DB_NAME=gestion_pedidos

# ================================================
# SEGURIDAD - JWT
# ================================================
# Generar con: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=REEMPLAZAR_CON_JWT_SECRET_SEGURA
JWT_EXPIRES_IN=24h

# ================================================
# SEGURIDAD - ENCRIPTACIÓN DE CONFIGURACIÓN
# ================================================
# Clave hex de 64 caracteres (256 bits)
# Generar con: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# IMPORTANTE: En production, la app FALLARÁ si falta esta clave.
CONFIG_ENCRYPTION_KEY=REEMPLAZAR_CON_HEX_64_CHARS

# ================================================
# CORS
# ================================================
# URL pública del frontend en producción
FRONTEND_URL=https://frontend.mi-dominio.com

# ================================================
# INTEGRACIÓN SIIGO (PRODUCCIÓN)
# ================================================
# Usuario y Access Key NO deberían vivir en .env de prod si puedes inyectarlos por secreto del orquestador (Vault, Env vars del servicio).
# Si decides usarlos por .env, recuerda que NO se versiona (está en .gitignore).
SIIGO_ENABLED=true
SIIGO_API_USERNAME=REEMPLAZAR_CON_USUARIO_SIIGO
SIIGO_API_ACCESS_KEY=REEMPLAZAR_CON_ACCESS_KEY_SIIGO
# Base sin /v1 (el servicio normaliza)
SIIGO_API_BASE_URL=https://api.siigo.com
# Partner-Id enviado en headers a SIIGO (ahora parametrizado)
SIIGO_API_PARTNER_ID=mi_partner_id_oficial
# Webhook secret para verificar firmas entrantes (si aplica)
SIIGO_WEBHOOK_SECRET=REEMPLAZAR_CON_WEBHOOK_SECRET_SEGURA

# ================================================
# INTEGRACIÓN WHATSAPP (WAPIFY) (PRODUCCIÓN)
# ================================================
WHATSAPP_ENABLED=true
WAPIFY_API_TOKEN=REEMPLAZAR_CON_TOKEN_WAPIFY
WAPIFY_API_BASE_URL=https://ap.whapify.ai/api
WHATSAPP_BUSINESS_NUMBER=573000000000
WHATSAPP_RETRY_ATTEMPTS=3
WHATSAPP_RETRY_DELAY_MINUTES=5

# ================================================
# RATE LIMITING (Ajustar según capacidad)
# ================================================
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=500

# ================================================
# CONFIGURACIÓN DE ARCHIVOS
# ================================================
UPLOAD_PATH=uploads/
MAX_FILE_SIZE=5242880

# ================================================
# NOTAS
# ================================================
# 1) Copiar este archivo como backend/.env (en el servidor) o inyectar variables por el orquestador (Docker/K8s/PM2 ecosystem).
# 2) NUNCA subir .env a Git (ya está ignorado).
# 3) CONFIG_ENCRYPTION_KEY es obligatoria en production (la app fallará si falta o si no tiene 64 chars hex).
# 4) Si ya guardaste credenciales en BD, ejecutar el script de migración para cifrar y limpiar texto plano:
#    node scripts/migrate_system_config_secure.js
