const axios = require('axios');

async function testQuotationInvoiceCreation() {
  console.log('üß™ Probando creaci√≥n de facturas desde cotizaciones (post-correcciones)...\n');

  const BASE_URL = 'http://localhost:3001';
  let authToken = null;

  try {
    // PASO 1: Autenticaci√≥n
    console.log('üîê 1. Iniciando sesi√≥n...');
    
    const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: 'admin@admin.com',
      password: 'admin123'
    });

    authToken = loginResponse.data.token;
    console.log('   ‚úÖ Autenticaci√≥n exitosa');

    // PASO 2: Obtener un cliente v√°lido
    console.log('üë• 2. Buscando cliente v√°lido...');
    
    const customersResponse = await axios.get(
      `${BASE_URL}/api/quotations/customers/search?q=ALEXANDER`,
      {
        headers: { 'Authorization': `Bearer ${authToken}` }
      }
    );

    if (!customersResponse.data.success || customersResponse.data.customers.length === 0) {
      throw new Error('No se encontraron clientes para la prueba');
    }

    const customer = customersResponse.data.customers[0];
    console.log(`   ‚úÖ Cliente encontrado: ${customer.name} (ID: ${customer.id})`);

    // PASO 3: Crear una factura desde cotizaci√≥n
    console.log('üìã 3. Creando factura desde cotizaci√≥n con SIIGO...');
    
    const invoiceData = {
      customerId: customer.id,
      items: [
        {
          product_code: 'LIQUIPP01',
          product_name: 'Liqui Pop Fresa',
          quantity: 2,
          unit_price: 3500,
          description: 'Liqui Pop sabor fresa - producto de prueba'
        },
        {
          product_code: 'LIQUIPP02', 
          product_name: 'Liqui Pop Mora',
          quantity: 1,
          unit_price: 3500,
          description: 'Liqui Pop sabor mora - producto de prueba'
        }
      ],
      notes: 'Factura de prueba creada despu√©s de corregir document IDs - Sistema de gesti√≥n de pedidos',
      documentType: 'FV-1' // Usando FV-1 que ahora tiene el ID correcto (5152)
    };

    console.log('üìä JSON que se enviar√°:');
    console.log(JSON.stringify(invoiceData, null, 2));

    const invoiceResponse = await axios.post(
      `${BASE_URL}/api/quotations/create-invoice`,
      invoiceData,
      {
        headers: { 
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      }
    );

    if (invoiceResponse.data.success) {
      console.log('\nüéâ ¬°FACTURA CREADA EXITOSAMENTE!');
      console.log('üìã Detalles de la respuesta:');
      console.log(`   ‚Ä¢ ID SIIGO: ${invoiceResponse.data.data.siigo_invoice_id}`);
      console.log(`   ‚Ä¢ N√∫mero: ${invoiceResponse.data.data.siigo_invoice_number}`);
      console.log(`   ‚Ä¢ URL P√∫blica: ${invoiceResponse.data.data.siigo_public_url || 'N/A'}`);
      console.log(`   ‚Ä¢ Items procesados: ${invoiceResponse.data.data.items_processed}`);
      console.log(`   ‚Ä¢ Cliente: ${invoiceResponse.data.data.customer.name}`);
      console.log(`   ‚Ä¢ Tipo documento: ${invoiceResponse.data.data.document_type}`);
      
      if (invoiceResponse.data.data.siigo_request_data) {
        console.log('\nüìÑ Datos enviados a SIIGO:');
        console.log(`   ‚Ä¢ Document ID usado: ${invoiceResponse.data.data.siigo_request_data.document.id}`);
        console.log(`   ‚Ä¢ Vendedor: ${invoiceResponse.data.data.siigo_request_data.seller}`);
        console.log(`   ‚Ä¢ Total: ${invoiceResponse.data.data.siigo_request_data.payments?.[0]?.value || 'N/A'}`);
      }
      
    } else {
      console.log('‚ùå Error creando factura:');
      console.log('   Mensaje:', invoiceResponse.data.message);
      console.log('   Error:', invoiceResponse.data.error);
      console.log('   Detalles:', invoiceResponse.data.details);
      
      if (invoiceResponse.data.suggestions) {
        console.log('   Sugerencias:');
        invoiceResponse.data.suggestions.forEach(suggestion => {
          console.log(`     ‚Ä¢ ${suggestion}`);
        });
      }
    }

    // PASO 4: Probar tambi√©n con ChatGPT
    console.log('\nü§ñ 4. Probando creaci√≥n con ChatGPT...');
    
    const chatgptInvoiceData = {
      customer_id: customer.id,
      natural_language_order: 'Necesito 3 Liqui Pop de fresa y 2 de mora para entrega inmediata',
      notes: 'Pedido procesado con ChatGPT - Prueba despu√©s de correcciones'
    };

    try {
      const chatgptResponse = await axios.post(
        `${BASE_URL}/api/quotations/create-siigo-invoice-with-chatgpt`,
        chatgptInvoiceData,
        {
          headers: { 
            'Authorization': `Bearer ${authToken}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (chatgptResponse.data.success) {
        console.log('   ‚úÖ Factura con ChatGPT creada exitosamente');
        console.log(`   ‚Ä¢ ID SIIGO: ${chatgptResponse.data.data.siigo_invoice_id}`);
        console.log(`   ‚Ä¢ Items detectados por ChatGPT: ${chatgptResponse.data.data.chatgpt_stats?.items_detected || 0}`);
        console.log(`   ‚Ä¢ Confianza promedio: ${(chatgptResponse.data.data.chatgpt_stats?.confidence_average * 100).toFixed(1)}%`);
      } else {
        console.log('   ‚ö†Ô∏è Error con ChatGPT:', chatgptResponse.data.message);
        if (chatgptResponse.data.errorType === 'QUOTA_EXCEEDED') {
          console.log('   üìù Nota: Cuota de ChatGPT excedida (normal en pruebas)');
        }
      }
    } catch (chatgptError) {
      console.log('   ‚ö†Ô∏è Error en prueba ChatGPT:', chatgptError.response?.data?.message || chatgptError.message);
      if (chatgptError.response?.data?.errorType === 'QUOTA_EXCEEDED') {
        console.log('   üìù Nota: Cuota de ChatGPT excedida (normal en pruebas)');
      }
    }

  } catch (error) {
    console.error('\n‚ùå Error en la prueba:', error.message);
    
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
      
      // Analizar errores espec√≠ficos
      if (error.response.status === 400) {
        console.log('\nüîç An√°lisis del error 400:');
        console.log('   ‚Ä¢ Si antes ve√≠as errores 400, esto indica que la correcci√≥n funcion√≥');
        console.log('   ‚Ä¢ Error 400 actual puede ser por datos de cliente o productos inv√°lidos');
        console.log('   ‚Ä¢ Revisar que el cliente tenga document/identification v√°lido');
      }
      
      if (error.response.status === 422) {
        console.log('\nüîç An√°lisis del error 422:');
        console.log('   ‚Ä¢ Error de validaci√≥n en SIIGO');
        console.log('   ‚Ä¢ Puede ser por productos inexistentes o datos faltantes');
        console.log('   ‚Ä¢ El document ID ahora debe ser correcto (5152)');
      }
    }
  }

  console.log('\nüìã Resumen de correcciones aplicadas:');
  console.log('   ‚úÖ SIIGO Document ID corregido: 15047/5153 ‚Üí 5152');
  console.log('   ‚úÖ ChatGPT foreign key constraint arreglado');
  console.log('   ‚úÖ quotation_id es opcional (NULL permitido)');
  console.log('   ‚úÖ Backend reiniciado autom√°ticamente');
  console.log('\nüí° Si a√∫n hay errores, pueden ser por:');
  console.log('   ‚Ä¢ SIIGO API rate limiting (503 errors)');
  console.log('   ‚Ä¢ Productos inexistentes en SIIGO');
  console.log('   ‚Ä¢ Datos de cliente inv√°lidos');
  console.log('   ‚Ä¢ Cuota ChatGPT excedida');
}

// Ejecutar la prueba
testQuotationInvoiceCreation()
  .then(() => {
    console.log('\n‚úÖ Prueba completada');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå Error ejecutando prueba:', error);
    process.exit(1);
  });
