const fetch = require('node-fetch');

async function testMessengerLoginView() {
  console.log('üß™ Probando vista de mensajero espec√≠fico...\n');

  try {
    // 1. Login como julian_carrillo (mensajero)
    console.log('1. üîê Logueando como julian_carrillo...');
    const loginResponse = await fetch('http://localhost:3001/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        username: 'julian_carrillo',
        password: 'password123'
      })
    });
    
    if (!loginResponse.ok) {
      console.log('‚ùå Login failed. Intentando con credenciales alternativas...');
      
      // Intentar con admin para obtener info del usuario
      const adminLogin = await fetch('http://localhost:3001/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: 'admin',
          password: 'admin123'
        })
      });
      
      const adminData = await adminLogin.json();
      const adminToken = adminData.data?.token;
      
      // Obtener info del mensajero
      const userResponse = await fetch('http://localhost:3001/api/users/16', {
        headers: { 'Authorization': `Bearer ${adminToken}` }
      });
      
      if (userResponse.ok) {
        const userData = await userResponse.json();
        console.log('üë§ Info del mensajero julian_carrillo:');
        console.log(JSON.stringify(userData, null, 2));
      }
      
      console.log('‚ö†Ô∏è No se pudo hacer login como julian_carrillo. Probando credenciales comunes...');
      
      // Intentar diferentes contrase√±as comunes
      const commonPasswords = ['123456', 'password', 'julian123', 'mensajero123'];
      let messengerToken = null;
      let messengerData = null;
      
      for (const pwd of commonPasswords) {
        const testLogin = await fetch('http://localhost:3001/api/auth/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            username: 'julian_carrillo',
            password: pwd
          })
        });
        
        if (testLogin.ok) {
          messengerData = await testLogin.json();
          messengerToken = messengerData.data?.token;
          console.log(`‚úÖ Login exitoso con contrase√±a: ${pwd}`);
          break;
        }
      }
      
      if (!messengerToken) {
        console.log('‚ùå No se pudo hacer login como julian_carrillo con ninguna contrase√±a com√∫n');
        return;
      }
    } else {
      const messengerData = await loginResponse.json();
      const messengerToken = messengerData.data?.token;
    }

    // Si llegamos aqu√≠, tenemos un token v√°lido
    const messengerData = !loginResponse.ok ? messengerData : await loginResponse.json();
    const messengerToken = messengerData.data?.token;
    
    console.log('‚úÖ Login como mensajero exitoso');
    console.log('üë§ Datos del mensajero logueado:');
    console.log(`   - ID: ${messengerData.data.user.id}`);
    console.log(`   - Username: ${messengerData.data.user.username}`);
    console.log(`   - Nombre: ${messengerData.data.user.full_name}`);
    console.log(`   - Rol: ${messengerData.data.user.role}`);

    // 2. Obtener pedidos usando endpoint de mensajeros
    console.log('\n2. üì¶ Obteniendo pedidos como mensajero...');
    const ordersResponse = await fetch('http://localhost:3001/api/messenger/orders', {
      headers: {
        'Authorization': `Bearer ${messengerToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!ordersResponse.ok) {
      console.log(`‚ùå Error obteniendo pedidos: ${ordersResponse.status} ${ordersResponse.statusText}`);
      const errorText = await ordersResponse.text();
      console.log('üìÑ Respuesta del error:', errorText);
      return;
    }
    
    const ordersData = await ordersResponse.json();
    const messengerOrders = ordersData.data || ordersData;
    
    console.log(`‚úÖ ${messengerOrders.length} pedidos obtenidos para el mensajero`);

    // 3. Analizar cada pedido y sus opciones
    console.log('\n3. üéØ AN√ÅLISIS DE PEDIDOS VISIBLES PARA EL MENSAJERO:');
    
    if (messengerOrders.length === 0) {
      console.log('‚ö†Ô∏è EL MENSAJERO NO VE NING√öN PEDIDO');
      console.log('   Esto explica por qu√© no ve opciones de aceptar');
      console.log('\n4. üîç POSIBLES CAUSAS:');
      console.log('   - El endpoint /api/messenger/orders no devuelve pedidos asignados');
      console.log('   - Los pedidos no est√°n correctamente asignados a este mensajero');
      console.log('   - Hay un problema de autorizaci√≥n en el endpoint');
      return;
    }

    messengerOrders.forEach((order, index) => {
      console.log(`\n${index + 1}. üì¶ ${order.order_number || order.id}`);
      console.log(`   üë§ Cliente: ${order.customer_name}`);
      console.log(`   üìç Estado del pedido: ${order.status}`);
      console.log(`   üöö Mensajero asignado: ${order.assigned_messenger_id}`);
      console.log(`   üì± Estado del mensajero: ${order.messenger_status}`);
      console.log(`   üí∞ Total: $${order.total_amount?.toLocaleString('es-CO') || '0'}`);
      
      // Determinar qu√© opciones ver√≠a en el frontend
      console.log(`   üéØ OPCIONES DISPONIBLES EN EL FRONTEND:`);
      
      if (order.messenger_status === 'assigned') {
        console.log(`      ‚úÖ [ACEPTAR PEDIDO] - Bot√≥n verde visible`);
        console.log(`      ‚ùå [RECHAZAR PEDIDO] - Bot√≥n rojo visible`);
      } else if (order.messenger_status === 'accepted') {
        console.log(`      ‚ñ∂Ô∏è [INICIAR ENTREGA] - Bot√≥n azul visible`);
      } else if (order.messenger_status === 'in_delivery') {
        console.log(`      üì¶ [COMPLETAR ENTREGA] - Bot√≥n morado visible`);
        console.log(`      ‚ö†Ô∏è [MARCAR ENTREGA FALLIDA] - Bot√≥n naranja visible`);
      } else {
        console.log(`      üëÅÔ∏è [SOLO VER] - Solo opciones de visualizaci√≥n`);
        console.log(`      ‚ö†Ô∏è Estado '${order.messenger_status}' no reconocido para acciones`);
      }
    });

    // 4. Comparaci√≥n con datos esperados
    console.log('\n4. üìä RESUMEN DEL PROBLEMA:');
    
    const assignedOrders = messengerOrders.filter(o => o.messenger_status === 'assigned');
    const acceptedOrders = messengerOrders.filter(o => o.messenger_status === 'accepted');
    const inDeliveryOrders = messengerOrders.filter(o => o.messenger_status === 'in_delivery');
    
    console.log(`   üìã Total pedidos visibles: ${messengerOrders.length}`);
    console.log(`   ‚úÖ Pedidos para ACEPTAR: ${assignedOrders.length}`);
    console.log(`   ‚ñ∂Ô∏è Pedidos para INICIAR: ${acceptedOrders.length}`);
    console.log(`   üì¶ Pedidos para ENTREGAR: ${inDeliveryOrders.length}`);
    
    // 5. Diagn√≥stico final
    console.log('\n5. üéØ DIAGN√ìSTICO:');
    
    if (assignedOrders.length > 0) {
      console.log(`‚úÖ HAY ${assignedOrders.length} pedido(s) con opci√≥n de aceptar disponible`);
      console.log('   El problema NO est√° en los datos del backend');
      console.log('   Revisar:');
      console.log('   - Si el frontend est√° mostrando correctamente estos pedidos');
      console.log('   - Si los filtros del frontend est√°n ocultando estos pedidos');
      console.log('   - Si hay errores de JavaScript en la consola del navegador');
    } else {
      console.log('‚ùå NO HAY pedidos con opci√≥n de aceptar');
      console.log('   El problema est√° en:');
      console.log('   - Los pedidos no est√°n siendo asignados correctamente');
      console.log('   - Los pedidos asignados no tienen el messenger_status correcto');
      console.log('   - El endpoint de mensajeros no est√° funcionando correctamente');
    }

    if (inDeliveryOrders.length > 0) {
      console.log(`\nüì¶ Hay ${inDeliveryOrders.length} pedido(s) en estado 'in_delivery'`);
      console.log('   Esto explica por qu√© el mensajero ve opciones de "entregar"');
    }

  } catch (error) {
    console.error('‚ùå Error en el test:', error);
  }
}

// Ejecutar
if (require.main === module) {
  testMessengerLoginView().then(() => {
    console.log('\nüèÅ Test completado');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  });
}

module.exports = { testMessengerLoginView };
