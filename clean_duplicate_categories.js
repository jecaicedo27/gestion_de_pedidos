const mysql = require('mysql2/promise');

const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'gestion_pedidos_dev',
    port: process.env.DB_PORT || 3306
};

async function cleanDuplicateCategories() {
    try {
        console.log('üîç Conectando a la base de datos...');
        const connection = await mysql.createConnection(dbConfig);
        
        console.log('üìã Analizando duplicados en la tabla categories...');
        
        // 1. Verificar duplicados actuales
        const [duplicates] = await connection.execute(`
            SELECT name, COUNT(*) as count
            FROM categories 
            GROUP BY name 
            HAVING COUNT(*) > 1
            ORDER BY count DESC
        `);
        
        if (duplicates.length > 0) {
            console.log(`‚ùå Encontrados ${duplicates.length} nombres de categor√≠as duplicadas:`);
            duplicates.forEach(dup => {
                console.log(`   - "${dup.name}": ${dup.count} registros`);
            });
            
            console.log('\nüßπ Limpiando duplicados...');
            
            // 2. Para cada categor√≠a duplicada, mantener solo el primer registro
            for (const duplicate of duplicates) {
                const categoryName = duplicate.name;
                
                console.log(`\nüîß Procesando: "${categoryName}"`);
                
                // Obtener todos los registros de esta categor√≠a
                const [records] = await connection.execute(`
                    SELECT id, is_active, created_at 
                    FROM categories 
                    WHERE name = ?
                    ORDER BY created_at ASC
                `, [categoryName]);
                
                console.log(`   üìã Encontrados ${records.length} registros`);
                
                // Mantener el primer registro (m√°s antiguo)
                const keepRecord = records[0];
                const deleteRecords = records.slice(1);
                
                console.log(`   ‚úÖ Mantener ID: ${keepRecord.id} (creado: ${keepRecord.created_at})`);
                console.log(`   üóëÔ∏è  Eliminar ${deleteRecords.length} registros duplicados`);
                
                // Eliminar los registros duplicados
                for (const record of deleteRecords) {
                    console.log(`      üóëÔ∏è  Eliminando ID: ${record.id}`);
                    await connection.execute(`
                        DELETE FROM categories WHERE id = ?
                    `, [record.id]);
                }
            }
            
            console.log('\n‚úÖ Limpieza completada!');
            
        } else {
            console.log('‚úÖ No se encontraron duplicados en la tabla categories');
        }
        
        // 3. Verificar estado final
        console.log('\nüìä Estado final de la tabla:');
        const [final] = await connection.execute(`
            SELECT COUNT(*) as total_categories,
                   COUNT(DISTINCT name) as unique_names
            FROM categories
        `);
        
        console.log(`   Total categor√≠as: ${final[0].total_categories}`);
        console.log(`   Nombres √∫nicos: ${final[0].unique_names}`);
        
        if (final[0].total_categories === final[0].unique_names) {
            console.log('‚úÖ Todos los nombres son √∫nicos ahora');
        } else {
            console.log('‚ö†Ô∏è  A√∫n hay duplicados');
        }
        
        await connection.end();
        console.log('\nüèÅ Proceso completado');
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
        process.exit(1);
    }
}

// Ejecutar limpieza
cleanDuplicateCategories();
