const axios = require('axios');

console.log('üîç DIAGN√ìSTICO EN TIEMPO REAL: Dropdown de mensajeros vac√≠o');
console.log('=========================================================\n');

async function debugRealtimeDropdownIssue() {
  try {
    console.log('1Ô∏è‚É£ Probando directamente la API de usuarios/mensajeros...');
    
    // Simular la misma request que hace el frontend
    const response = await axios.get('http://localhost:3001/api/users?role=mensajero&active=true', {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });

    console.log(`üì° Status: ${response.status}`);
    console.log(`üìä Headers:`, response.headers);
    console.log(`üìã Data structure:`, JSON.stringify(response.data, null, 2));

    console.log('\n2Ô∏è‚É£ Analizando estructura de respuesta...');
    
    const data = response.data;
    
    if (Array.isArray(data)) {
      console.log('‚úÖ Respuesta es un array directo');
      console.log(`üë• Mensajeros encontrados: ${data.length}`);
      data.forEach((m, index) => {
        console.log(`   ${index + 1}. ID: ${m.id}, full_name: "${m.full_name}", username: "${m.username}"`);
      });
    } else if (data.success && data.data) {
      console.log('‚úÖ Respuesta tiene estructura { success, data }');
      
      if (data.data.users) {
        console.log('‚úÖ data.users existe');
        console.log(`üë• Mensajeros encontrados: ${data.data.users.length}`);
        data.data.users.forEach((m, index) => {
          console.log(`   ${index + 1}. ID: ${m.id}, full_name: "${m.full_name}", username: "${m.username}"`);
        });
      } else if (Array.isArray(data.data)) {
        console.log('‚úÖ data.data es un array');
        console.log(`üë• Mensajeros encontrados: ${data.data.length}`);
        data.data.forEach((m, index) => {
          console.log(`   ${index + 1}. ID: ${m.id}, full_name: "${m.full_name}", username: "${m.username}"`);
        });
      } else {
        console.log('‚ùå data.data no es reconocible:', data.data);
      }
    } else {
      console.log('‚ùå Estructura de respuesta no reconocida');
    }

    console.log('\n3Ô∏è‚É£ Simulando el procesamiento del frontend...');
    
    // Simular exactamente lo que hace el LogisticsModal corregido
    let frontendMessengers = [];
    const messengersData = data;
    
    if (Array.isArray(messengersData)) {
      frontendMessengers = messengersData;
      console.log('üîÑ Frontend: Procesando como array directo');
    } else if (messengersData.success && messengersData.data) {
      console.log('üîÑ Frontend: Procesando estructura con success/data');
      if (messengersData.data.users) {
        frontendMessengers = messengersData.data.users;
        console.log('üîÑ Frontend: Usando data.users');
      } else if (Array.isArray(messengersData.data)) {
        frontendMessengers = messengersData.data;
        console.log('üîÑ Frontend: Usando data como array');
      } else {
        frontendMessengers = [];
        console.log('üîÑ Frontend: data no reconocida, usando array vac√≠o');
      }
    } else if (messengersData.users) {
      frontendMessengers = messengersData.users;
      console.log('üîÑ Frontend: Usando users directo');
    } else {
      frontendMessengers = [];
      console.log('üîÑ Frontend: Estructura no reconocida, usando array vac√≠o');
    }

    console.log(`\nüìä Frontend mensajeros procesados: ${frontendMessengers.length}`);

    if (frontendMessengers.length > 0) {
      console.log('üìã Opciones que deber√≠a generar el dropdown:');
      const dropdownOptions = frontendMessengers.map(messenger => ({
        value: messenger.id.toString(),
        label: messenger.full_name || messenger.username || 'Mensajero sin nombre'
      }));
      
      dropdownOptions.forEach((option, index) => {
        console.log(`   ${index + 1}. value: "${option.value}", label: "${option.label}"`);
      });

      console.log('\nüéØ AN√ÅLISIS:');
      if (dropdownOptions.length > 0 && dropdownOptions[0].label !== 'Mensajero sin nombre') {
        console.log('‚úÖ Los datos est√°n correctos y el dropdown DEBER√çA mostrar opciones');
        console.log('');
        console.log('üö® PROBLEMA IDENTIFICADO:');
        console.log('   El problema probablemente est√° en el componente CustomDropdown de React');
        console.log('   o en el estado de React que no se est√° actualizando correctamente');
        console.log('');
        console.log('üîß PASOS PARA SOLUCIONAR:');
        console.log('   1. Verificar que el state se est√© actualizando en React');
        console.log('   2. Revisar el componente CustomDropdown');
        console.log('   3. Forzar un re-render con clave √∫nica');
      } else {
        console.log('‚ùå Los datos tienen problemas de etiquetas');
      }
    } else {
      console.log('‚ùå No se procesaron mensajeros - hay un problema en la l√≥gica de procesamiento');
    }

  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error.message);
    if (error.response) {
      console.log(`üì° Status de error: ${error.response.status}`);
      console.log(`üìã Data de error:`, error.response.data);
    }
  }
}

debugRealtimeDropdownIssue().catch(console.error);
