const { spawn } = require('child_process');
const path = require('path');

console.log('üîÑ Reiniciando backend para activar rutas de mensajeros...\n');

// Funci√≥n para matar procesos en el puerto 3001
function killProcessOnPort() {
  return new Promise((resolve) => {
    const killProcess = spawn('npx', ['kill-port', '3001'], {
      stdio: 'inherit',
      shell: true
    });

    killProcess.on('close', (code) => {
      console.log('üõë Procesos en puerto 3001 terminados');
      resolve();
    });

    killProcess.on('error', (error) => {
      console.log('‚ÑπÔ∏è  No hay procesos ejecut√°ndose en puerto 3001');
      resolve();
    });
  });
}

// Funci√≥n para iniciar el backend
function startBackend() {
  return new Promise((resolve, reject) => {
    console.log('üöÄ Iniciando backend...');
    
    const backend = spawn('node', ['backend/server.js'], {
      stdio: 'inherit',
      shell: true,
      cwd: process.cwd()
    });

    backend.on('spawn', () => {
      console.log('‚úÖ Backend iniciado exitosamente');
      console.log('üì° Rutas de mensajero ahora est√°n activas:');
      console.log('  GET  /api/messenger/orders');
      console.log('  POST /api/messenger/orders/:id/accept');
      console.log('  POST /api/messenger/orders/:id/reject');
      console.log('  POST /api/messenger/orders/:id/start-delivery');
      console.log('  POST /api/messenger/orders/:id/complete');
      console.log('  POST /api/messenger/orders/:id/mark-failed');
      console.log('  GET  /api/messenger/daily-summary');
      console.log('\nüí° Ahora puedes probar el sistema como mensajero');
      resolve();
    });

    backend.on('error', (error) => {
      console.error('‚ùå Error iniciando backend:', error);
      reject(error);
    });

    // No esperar a que termine el proceso del backend
    // ya que debe mantenerse ejecut√°ndose
  });
}

// Ejecutar reinicio
async function restart() {
  try {
    await killProcessOnPort();
    
    // Esperar un poco antes de iniciar
    console.log('‚è≥ Esperando 3 segundos...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    await startBackend();
    
    console.log('\nüéâ ¬°BACKEND REINICIADO EXITOSAMENTE!');
    console.log('‚úÖ Las rutas de messenger est√°n ahora activas');
    console.log('üì± Los mensajeros pueden ahora:');
    console.log('   - Ver pedidos asignados');
    console.log('   - Aceptar/rechazar pedidos');
    console.log('   - Iniciar entregas');
    console.log('   - Completar entregas');
    console.log('   - Marcar entregas como fallidas');
    
    // Mantener el script ejecut√°ndose para que el backend no se cierre
    setInterval(() => {
      // Verificar que el backend sigue activo cada 30 segundos
    }, 30000);
    
  } catch (error) {
    console.error('‚ùå Error durante el reinicio:', error);
    process.exit(1);
  }
}

restart();
