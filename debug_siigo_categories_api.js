const axios = require('axios');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, 'backend', '.env') });

async function debugSiigoCategoriesAPI() {
  console.log('üîç INVESTIGANDO API DE CATEGOR√çAS DE SIIGO');
  console.log('='.repeat(50));

  // Configuraci√≥n de SIIGO - Usar los nombres correctos de las variables del .env
  const SIIGO_API_URL = process.env.SIIGO_API_BASE_URL + '/v1' || 'https://api.siigo.com/v1';
  const SIIGO_USERNAME = process.env.SIIGO_API_USERNAME;
  const SIIGO_ACCESS_KEY = process.env.SIIGO_API_ACCESS_KEY;

  console.log('üìã Configuraci√≥n SIIGO:');
  console.log('- API URL:', SIIGO_API_URL);
  console.log('- Username:', SIIGO_USERNAME ? '‚úÖ Configurado' : '‚ùå No configurado');
  console.log('- Access Key:', SIIGO_ACCESS_KEY ? '‚úÖ Configurado' : '‚ùå No configurado');

  if (!SIIGO_USERNAME || !SIIGO_ACCESS_KEY) {
    console.log('‚ùå Credenciales de SIIGO no configuradas');
    return;
  }

  try {
    // Autenticar con SIIGO - Usar el endpoint correcto
    console.log('\nüîê Autenticando con SIIGO...');
    const authResponse = await axios.post(`${process.env.SIIGO_API_BASE_URL}/auth`, {
      username: SIIGO_USERNAME,
      access_key: SIIGO_ACCESS_KEY
    });

    const token = authResponse.data.access_token;
    console.log('‚úÖ Autenticaci√≥n exitosa');

    // Headers para las solicitudes
    const headers = {
      'Authorization': token,
      'Content-Type': 'application/json',
      'Partner-Id': 'test-partner'
    };

    // 1. Probar endpoint de categor√≠as directamente
    console.log('\nüîç Probando endpoints de categor√≠as...');
    
    const possibleEndpoints = [
      '/products/categories',
      '/categories', 
      '/product-categories',
      '/items/categories',
      '/inventory/categories',
      '/products/groups',
      '/groups',
      '/product-groups'
    ];

    for (const endpoint of possibleEndpoints) {
      try {
        console.log(`\nüì° Probando: ${SIIGO_API_URL}${endpoint}`);
        const response = await axios.get(`${SIIGO_API_URL}${endpoint}`, { headers });
        
        console.log(`‚úÖ ENDPOINT ENCONTRADO: ${endpoint}`);
        console.log('üìä Respuesta:', JSON.stringify(response.data, null, 2));
        
        if (Array.isArray(response.data)) {
          console.log(`üì¶ Categor√≠as encontradas: ${response.data.length}`);
          response.data.slice(0, 5).forEach((category, index) => {
            console.log(`${index + 1}. ${JSON.stringify(category, null, 2)}`);
          });
        }
        
        return; // Salir al encontrar el primer endpoint v√°lido
        
      } catch (error) {
        if (error.response) {
          console.log(`‚ùå ${endpoint}: ${error.response.status} - ${error.response.statusText}`);
        } else {
          console.log(`‚ùå ${endpoint}: Error de conexi√≥n`);
        }
      }
    }

    // 2. Si no hay endpoint directo, extraer categor√≠as de productos
    console.log('\nüì¶ No se encontr√≥ endpoint directo de categor√≠as.');
    console.log('üîÑ Extrayendo categor√≠as √∫nicas de productos SIIGO...');

    const productsResponse = await axios.get(`${SIIGO_API_URL}/products`, { 
      headers,
      params: {
        page_size: 100, // Obtener m√°s productos
        page: 1
      }
    });

    if (productsResponse.data && productsResponse.data.results) {
      const products = productsResponse.data.results;
      console.log(`üìä Productos obtenidos: ${products.length}`);

      // Extraer categor√≠as √∫nicas
      const categoriesSet = new Set();
      const categoryFields = ['category', 'group', 'type', 'family', 'classification'];
      
      products.forEach(product => {
        console.log('üîç Analizando producto:', product.name);
        console.log('üìã Campos del producto:', Object.keys(product));
        
        categoryFields.forEach(field => {
          if (product[field]) {
            console.log(`  - ${field}: ${product[field]}`);
            categoriesSet.add(product[field]);
          }
        });

        // Buscar otros campos que puedan contener categor√≠as
        Object.keys(product).forEach(key => {
          if (key.toLowerCase().includes('categor') || 
              key.toLowerCase().includes('group') ||
              key.toLowerCase().includes('type') ||
              key.toLowerCase().includes('class')) {
            console.log(`  - CAMPO POSIBLE: ${key}: ${product[key]}`);
            if (product[key]) {
              categoriesSet.add(product[key]);
            }
          }
        });

        console.log('---');
      });

      const uniqueCategories = Array.from(categoriesSet);
      console.log('\nüéØ CATEGOR√çAS √öNICAS ENCONTRADAS EN SIIGO:');
      console.log('='.repeat(40));
      uniqueCategories.forEach((category, index) => {
        console.log(`${index + 1}. ${category}`);
      });
      
      console.log(`\nüìä Total de categor√≠as √∫nicas: ${uniqueCategories.length}`);
      
      // Mostrar estructura completa de un producto de ejemplo
      if (products.length > 0) {
        console.log('\nüîç ESTRUCTURA COMPLETA DE PRODUCTO DE EJEMPLO:');
        console.log('='.repeat(50));
        console.log(JSON.stringify(products[0], null, 2));
      }
    }

  } catch (error) {
    console.error('‚ùå Error investigando categor√≠as SIIGO:', error.message);
    if (error.response) {
      console.error('üì° Respuesta del servidor:', error.response.data);
    }
  }
}

debugSiigoCategoriesAPI().catch(console.error);
