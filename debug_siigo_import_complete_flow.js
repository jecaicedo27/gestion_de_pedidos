const mysql = require('mysql2/promise');
const axios = require('axios');

const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'gestion_pedidos_dev',
    port: process.env.DB_PORT || 3306
};

async function debugCompleteImportFlow() {
    let connection;
    try {
        console.log('üîç INICIANDO DEBUG COMPLETO DEL FLUJO DE IMPORTACI√ìN SIIGO...');
        
        connection = await mysql.createConnection(dbConfig);
        
        // PASO 1: Verificar estado inicial
        console.log('\nüìä PASO 1: Verificando estado inicial...');
        
        const [ordersCount] = await connection.execute('SELECT COUNT(*) as count FROM orders');
        const [orderItemsCount] = await connection.execute('SELECT COUNT(*) as count FROM order_items');
        const [siigoOrders] = await connection.execute('SELECT COUNT(*) as count FROM orders WHERE siigo_invoice_id IS NOT NULL');
        
        console.log(`   üì¶ Pedidos totales: ${ordersCount[0].count}`);
        console.log(`   üìã Items de pedidos: ${orderItemsCount[0].count}`);
        console.log(`   üîó Pedidos de SIIGO: ${siigoOrders[0].count}`);
        
        // PASO 2: Obtener facturas disponibles desde SIIGO API
        console.log('\nüìã PASO 2: Obteniendo facturas desde SIIGO API...');
        
        const apiResponse = await axios.get('http://localhost:3001/api/siigo/invoices', {
            params: {
                page: 1,
                page_size: 10
            }
        });
        
        if (!apiResponse.data.success) {
            throw new Error(`API Error: ${apiResponse.data.message}`);
        }
        
        const invoices = apiResponse.data.data.results;
        console.log(`   ‚úÖ ${invoices.length} facturas obtenidas`);
        
        // Encontrar una factura no importada
        const availableInvoice = invoices.find(inv => !inv.is_imported);
        
        if (!availableInvoice) {
            console.log('   ‚ö†Ô∏è  No hay facturas disponibles para importar');
            return;
        }
        
        console.log(`   üéØ Factura seleccionada: ${availableInvoice.name} (ID: ${availableInvoice.id})`);
        console.log(`   üë§ Cliente: ${availableInvoice.customer?.commercial_name || availableInvoice.customer?.name || 'Sin nombre'}`);
        console.log(`   üí∞ Total: $${availableInvoice.total || 'Sin total'}`);
        
        // PASO 3: Simular importaci√≥n manual
        console.log('\nüíæ PASO 3: Simulando importaci√≥n manual...');
        
        const importData = {
            invoice_ids: [availableInvoice.id],
            payment_method: 'transferencia',
            delivery_method: 'domicilio'
        };
        
        console.log(`   üì§ Enviando solicitud de importaci√≥n...`);
        console.log(`   üìã Datos:`, importData);
        
        try {
            const importResponse = await axios.post('http://localhost:3001/api/siigo/import', importData, {
                headers: {
                    'Content-Type': 'application/json'
                },
                timeout: 30000
            });
            
            console.log(`   ‚úÖ Respuesta de importaci√≥n:`, importResponse.data);
            
            if (importResponse.data.success) {
                console.log(`   üéâ Importaci√≥n exitosa!`);
                console.log(`   üìä Resumen: ${importResponse.data.summary?.successful || 'N/A'} exitosas de ${importResponse.data.summary?.total || 'N/A'}`);
            } else {
                console.log(`   ‚ùå Importaci√≥n fall√≥: ${importResponse.data.message}`);
            }
            
        } catch (importError) {
            console.error(`   ‚ùå Error en solicitud de importaci√≥n:`, importError.message);
            if (importError.response) {
                console.error(`   üìÑ Respuesta del servidor:`, importError.response.data);
            }
            throw importError;
        }
        
        // PASO 4: Verificar cambios en la base de datos
        console.log('\nüîç PASO 4: Verificando cambios en base de datos...');
        
        // Esperar un momento para que se complete la transacci√≥n
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const [newOrdersCount] = await connection.execute('SELECT COUNT(*) as count FROM orders');
        const [newOrderItemsCount] = await connection.execute('SELECT COUNT(*) as count FROM order_items');
        const [newSiigoOrders] = await connection.execute('SELECT COUNT(*) as count FROM orders WHERE siigo_invoice_id IS NOT NULL');
        
        console.log(`   üì¶ Pedidos totales: ${ordersCount[0].count} ‚Üí ${newOrdersCount[0].count} (${newOrdersCount[0].count - ordersCount[0].count > 0 ? '+' : ''}${newOrdersCount[0].count - ordersCount[0].count})`);
        console.log(`   üìã Items de pedidos: ${orderItemsCount[0].count} ‚Üí ${newOrderItemsCount[0].count} (${newOrderItemsCount[0].count - orderItemsCount[0].count > 0 ? '+' : ''}${newOrderItemsCount[0].count - orderItemsCount[0].count})`);
        console.log(`   üîó Pedidos de SIIGO: ${siigoOrders[0].count} ‚Üí ${newSiigoOrders[0].count} (${newSiigoOrders[0].count - siigoOrders[0].count > 0 ? '+' : ''}${newSiigoOrders[0].count - siigoOrders[0].count})`);
        
        // PASO 5: Buscar el pedido espec√≠fico importado
        console.log('\nüîç PASO 5: Buscando pedido importado espec√≠fico...');
        
        const [importedOrder] = await connection.execute(
            'SELECT * FROM orders WHERE siigo_invoice_id = ? ORDER BY created_at DESC LIMIT 1',
            [availableInvoice.id]
        );
        
        if (importedOrder.length > 0) {
            const order = importedOrder[0];
            console.log(`   ‚úÖ PEDIDO ENCONTRADO:`);
            console.log(`      üÜî ID: ${order.id}`);
            console.log(`      üìÑ N√∫mero: ${order.order_number}`);
            console.log(`      üë§ Cliente: ${order.customer_name}`);
            console.log(`      üìû Tel√©fono: ${order.customer_phone}`);
            console.log(`      üí∞ Total: $${order.total_amount}`);
            console.log(`      üìä Estado: ${order.status}`);
            console.log(`      üè∑Ô∏è  SIIGO ID: ${order.siigo_invoice_id}`);
            
            // Buscar items del pedido
            const [orderItems] = await connection.execute(
                'SELECT * FROM order_items WHERE order_id = ?',
                [order.id]
            );
            
            console.log(`   üìã ITEMS DEL PEDIDO: ${orderItems.length}`);
            orderItems.forEach((item, index) => {
                console.log(`      ${index + 1}. ${item.name} (Cantidad: ${item.quantity}, Precio: $${item.price})`);
            });
            
        } else {
            console.log(`   ‚ùå PEDIDO NO ENCONTRADO en base de datos`);
            console.log(`   üîç Buscando en sync_log...`);
            
            const [syncLog] = await connection.execute(
                'SELECT * FROM siigo_sync_log WHERE siigo_invoice_id = ? ORDER BY processed_at DESC LIMIT 1',
                [availableInvoice.id]
            );
            
            if (syncLog.length > 0) {
                console.log(`   üìã Log de sincronizaci√≥n encontrado:`);
                console.log(`      üìä Estado: ${syncLog[0].sync_status}`);
                console.log(`      ‚ùå Error: ${syncLog[0].error_message || 'Sin error'}`);
                console.log(`      ‚è∞ Procesado: ${syncLog[0].processed_at}`);
            } else {
                console.log(`   ‚ùå Sin registro en sync_log tampoco`);
            }
        }
        
        // PASO 6: Verificar disponibilidad en API despu√©s de importaci√≥n
        console.log('\nüîÑ PASO 6: Verificando disponibilidad en API despu√©s de importaci√≥n...');
        
        const postImportResponse = await axios.get('http://localhost:3001/api/siigo/invoices', {
            params: {
                page: 1,
                page_size: 10
            }
        });
        
        const postImportInvoices = postImportResponse.data.data.results;
        const targetInvoice = postImportInvoices.find(inv => inv.id === availableInvoice.id);
        
        if (targetInvoice) {
            console.log(`   üìã Factura a√∫n visible en API:`);
            console.log(`      üè∑Ô∏è  ID: ${targetInvoice.id}`);
            console.log(`      üìÑ Nombre: ${targetInvoice.name}`);
            console.log(`      ‚úÖ Importada: ${targetInvoice.is_imported ? 'S√ç' : 'NO'}`);
            console.log(`      üìä Estado: ${targetInvoice.import_status}`);
        } else {
            console.log(`   ‚ùå Factura ya no est√° en la lista de API`);
        }
        
        console.log('\nüéØ DIAGN√ìSTICO COMPLETO:');
        const wasImported = newSiigoOrders[0].count > siigoOrders[0].count;
        
        if (wasImported && importedOrder.length > 0) {
            console.log('   ‚úÖ IMPORTACI√ìN EXITOSA - Pedido creado correctamente');
        } else if (wasImported && importedOrder.length === 0) {
            console.log('   ‚ö†Ô∏è  IMPORTACI√ìN PARCIAL - Contador aument√≥ pero pedido no encontrado');
        } else {
            console.log('   ‚ùå IMPORTACI√ìN FALLIDA - No se cre√≥ el pedido');
            console.log('   üí° Posibles causas:');
            console.log('      - Error en processInvoiceToOrder');
            console.log('      - Transacci√≥n revertida');
            console.log('      - Error de foreign key');
            console.log('      - Error de validaci√≥n de datos');
        }
        
    } catch (error) {
        console.error('‚ùå Error en debug del flujo de importaci√≥n:', error.message);
        if (error.response) {
            console.error('üìÑ Response data:', error.response.data);
        }
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

// Ejecutar debug
debugCompleteImportFlow();
