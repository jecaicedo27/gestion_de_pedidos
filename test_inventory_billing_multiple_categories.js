const puppeteer = require('puppeteer');

// Test script para verificar la funcionalidad de selecci√≥n m√∫ltiple de categor√≠as 
// en la p√°gina de Inventario + Facturaci√≥n
const testMultipleCategorySelection = async () => {
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: { width: 1200, height: 800 },
    args: ['--no-sandbox'] 
  });
  
  try {
    const page = await browser.newPage();
    
    console.log('üß™ Iniciando test de selecci√≥n m√∫ltiple de categor√≠as...');
    
    // 1. NAVEGAR AL SITIO
    console.log('üìç Navegando al sitio...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle0' });
    
    // 2. LOGIN (si es necesario)
    try {
      console.log('üîê Intentando login...');
      const loginButton = await page.waitForSelector('button[type="submit"]', { timeout: 3000 });
      if (loginButton) {
        // Llenar credenciales de login
        await page.type('input[type="email"], input[name="email"]', 'admin@test.com');
        await page.type('input[type="password"], input[name="password"]', 'password123');
        await page.click('button[type="submit"]');
        await page.waitForTimeout(2000);
        console.log('‚úÖ Login exitoso');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è No se encontr√≥ formulario de login, continuando...');
    }
    
    // 3. NAVEGAR A INVENTARIO + FACTURACI√ìN
    console.log('üì¶ Navegando a Inventario + Facturaci√≥n...');
    try {
      // Buscar el enlace en la navegaci√≥n
      await page.click('a[href*="inventory-billing"], a:contains("Inventario"), a:contains("Facturaci√≥n")');
      await page.waitForTimeout(2000);
    } catch (error) {
      console.log('‚ö†Ô∏è Navegaci√≥n directa...');
      await page.goto('http://localhost:3000/inventory-billing', { waitUntil: 'networkidle0' });
    }
    
    console.log('üéØ P√°gina cargada, iniciando tests de funcionalidad...');
    await page.waitForTimeout(3000); // Dar tiempo para que carguen los productos
    
    // 4. VERIFICAR QUE LA P√ÅGINA CARG√ì CORRECTAMENTE
    const pageTitle = await page.$eval('h1', el => el.textContent);
    console.log('üìÑ T√≠tulo de p√°gina:', pageTitle);
    
    if (!pageTitle.includes('Inventario') && !pageTitle.includes('Facturaci√≥n')) {
      throw new Error('‚ùå No estamos en la p√°gina correcta de Inventario + Facturaci√≥n');
    }
    
    // 5. VERIFICAR QUE EL DROPDOWN DE CATEGOR√çAS M√öLTIPLES EXISTE
    console.log('üîç Verificando componente de categor√≠as m√∫ltiples...');
    
    const categoryDropdown = await page.$('[class*="cursor-pointer focus-within:ring"]');
    if (!categoryDropdown) {
      throw new Error('‚ùå No se encontr√≥ el dropdown de categor√≠as m√∫ltiples');
    }
    console.log('‚úÖ Dropdown de categor√≠as m√∫ltiples encontrado');
    
    // 6. HACER CLIC EN EL DROPDOWN PARA ABRIRLO
    console.log('üñ±Ô∏è Abriendo dropdown de categor√≠as...');
    await page.click('[class*="cursor-pointer focus-within:ring"]');
    await page.waitForTimeout(1000);
    
    // 7. VERIFICAR QUE SE MUESTRAN LAS OPCIONES DE CATEGOR√çAS
    console.log('üìã Verificando opciones de categor√≠as...');
    const categoryOptions = await page.$$('.p-2.rounded.cursor-pointer');
    console.log(`üìä Categor√≠as encontradas: ${categoryOptions.length}`);
    
    if (categoryOptions.length === 0) {
      console.log('‚ö†Ô∏è No se encontraron categor√≠as, verificando si hay productos...');
      
      // Verificar si hay mensaje de "no hay categor√≠as"
      const noCategories = await page.$('.text-gray-500');
      if (noCategories) {
        console.log('üìù Mensaje encontrado:', await page.evaluate(el => el.textContent, noCategories));
      }
    } else {
      // 8. SELECCIONAR M√öLTIPLES CATEGOR√çAS
      console.log('‚úÖ Seleccionando m√∫ltiples categor√≠as...');
      
      // Seleccionar las primeras 2-3 categor√≠as disponibles
      const categoriesToSelect = Math.min(3, categoryOptions.length);
      for (let i = 0; i < categoriesToSelect; i++) {
        console.log(`üéØ Seleccionando categor√≠a ${i + 1}...`);
        await categoryOptions[i].click();
        await page.waitForTimeout(500);
      }
      
      // 9. VERIFICAR QUE SE MUESTRAN LAS BADGES DE CATEGOR√çAS SELECCIONADAS
      console.log('üè∑Ô∏è Verificando badges de categor√≠as seleccionadas...');
      await page.waitForTimeout(1000);
      
      const selectedBadges = await page.$$('.bg-blue-100.text-blue-800.px-2.py-1.rounded-full');
      console.log(`‚ú® Badges de categor√≠as seleccionadas: ${selectedBadges.length}`);
      
      if (selectedBadges.length > 0) {
        console.log('‚úÖ Las categor√≠as seleccionadas se muestran como badges');
        
        // Leer los textos de las badges
        for (let i = 0; i < selectedBadges.length; i++) {
          const badgeText = await page.evaluate(el => el.textContent, selectedBadges[i]);
          console.log(`üè∑Ô∏è Badge ${i + 1}: ${badgeText}`);
        }
      } else {
        console.log('‚ö†Ô∏è No se encontraron badges de categor√≠as seleccionadas');
      }
      
      // 10. VERIFICAR QUE LAS TABLAS SE FILTRAN CORRECTAMENTE
      console.log('üìä Verificando filtrado de productos por categor√≠as...');
      await page.waitForTimeout(2000);
      
      const categoryTables = await page.$$('.bg-white.rounded.shadow.overflow-hidden');
      console.log(`üìã Tablas de categor√≠as mostradas despu√©s del filtro: ${categoryTables.length}`);
      
      if (categoryTables.length > 0) {
        // Leer los t√≠tulos de las categor√≠as mostradas
        for (let i = 0; i < categoryTables.length; i++) {
          try {
            const categoryTitle = await categoryTables[i].$eval('h2', el => el.textContent);
            console.log(`üì¶ Categor√≠a mostrada ${i + 1}: ${categoryTitle}`);
          } catch (error) {
            console.log(`‚ö†Ô∏è No se pudo leer el t√≠tulo de la categor√≠a ${i + 1}`);
          }
        }
        console.log('‚úÖ Las tablas se filtran correctamente por categor√≠as seleccionadas');
      } else {
        console.log('‚ö†Ô∏è No se encontraron tablas de productos despu√©s del filtro');
      }
      
      // 11. PROBAR ELIMINAR UNA CATEGOR√çA DE LA SELECCI√ìN
      console.log('‚ùå Probando eliminaci√≥n de categor√≠a...');
      const removeButtons = await page.$$('.bg-blue-100 .w-3.h-3');
      if (removeButtons.length > 0) {
        console.log('üóëÔ∏è Eliminando la primera categor√≠a seleccionada...');
        await removeButtons[0].click();
        await page.waitForTimeout(1000);
        
        const remainingBadges = await page.$$('.bg-blue-100.text-blue-800.px-2.py-1.rounded-full');
        console.log(`‚ú® Badges restantes despu√©s de eliminar: ${remainingBadges.length}`);
        console.log('‚úÖ Eliminaci√≥n de categor√≠a funciona correctamente');
      }
      
      // 12. PROBAR BOT√ìN "LIMPIAR TODAS LAS CATEGOR√çAS"
      console.log('üßπ Probando bot√≥n de limpiar todas las categor√≠as...');
      const clearAllButton = await page.$('[title="Limpiar todas las categor√≠as"]');
      if (clearAllButton) {
        await clearAllButton.click();
        await page.waitForTimeout(1000);
        
        const remainingBadges = await page.$$('.bg-blue-100.text-blue-800.px-2.py-1.rounded-full');
        console.log(`‚ú® Badges despu√©s de limpiar todo: ${remainingBadges.length}`);
        
        if (remainingBadges.length === 0) {
          console.log('‚úÖ Bot√≥n "Limpiar todo" funciona correctamente');
        } else {
          console.log('‚ö†Ô∏è El bot√≥n "Limpiar todo" no elimin√≥ todas las categor√≠as');
        }
      } else {
        console.log('‚ö†Ô∏è No se encontr√≥ el bot√≥n de limpiar todas las categor√≠as');
      }
    }
    
    // 13. VERIFICAR QUE EL CARRITO SIGUE FUNCIONANDO
    console.log('üõí Verificando funcionalidad del carrito...');
    
    const stockButtons = await page.$$('.bg-green-500, .bg-yellow-500, .bg-red-500');
    console.log(`üîò Botones de stock encontrados: ${stockButtons.length}`);
    
    if (stockButtons.length > 0) {
      console.log('üéØ Intentando agregar producto al carrito...');
      
      // Buscar un bot√≥n verde (con stock disponible)
      const availableButtons = await page.$$('.bg-green-500:not(.cursor-not-allowed)');
      if (availableButtons.length > 0) {
        await availableButtons[0].click();
        await page.waitForTimeout(1000);
        
        // Verificar que aparece la notificaci√≥n de agregado al carrito
        const cartInfo = await page.$('[data-cart-panel]');
        if (cartInfo) {
          const cartText = await page.evaluate(el => el.textContent, cartInfo);
          if (cartText.includes('producto')) {
            console.log('‚úÖ Producto agregado al carrito exitosamente');
          }
        }
      }
    }
    
    console.log('üéâ Test de selecci√≥n m√∫ltiple de categor√≠as completado exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error durante el test:', error);
    
    // Tomar screenshot del error
    try {
      await page.screenshot({ 
        path: `test_error_${Date.now()}.png`, 
        fullPage: true 
      });
      console.log('üì∏ Screenshot del error guardado');
    } catch (screenshotError) {
      console.log('‚ö†Ô∏è No se pudo tomar screenshot del error');
    }
  } finally {
    // No cerrar el browser para permitir inspecci√≥n manual
    console.log('üîç Browser permanece abierto para inspecci√≥n manual...');
    console.log('üí° Presiona Ctrl+C cuando hayas terminado de revisar');
    
    // Mantener el proceso activo
    await new Promise(resolve => {
      process.on('SIGINT', () => {
        console.log('üëã Cerrando browser...');
        browser.close();
        resolve();
      });
    });
  }
};

// Ejecutar el test
testMultipleCategorySelection().catch(console.error);
