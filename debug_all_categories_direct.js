const mysql = require('mysql2/promise');
require('dotenv').config({ path: './backend/.env' });

async function debugAllCategories() {
    console.log('üîç Consultando TODAS las categor√≠as directamente de la BD...');
    
    const pool = mysql.createPool({
        host: process.env.DB_HOST,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        database: process.env.DB_NAME,
        waitForConnections: true,
        connectionLimit: 10,
        queueLimit: 0
    });

    try {
        // Consultar todas las categor√≠as con sus conteos
        const [categories] = await pool.execute(`
            SELECT 
                category, 
                COUNT(*) as count,
                GROUP_CONCAT(DISTINCT barcode ORDER BY barcode SEPARATOR ', ') as sample_codes
            FROM products 
            WHERE category IS NOT NULL 
            AND category != '' 
            AND category != 'Sin categor√≠a'
            GROUP BY category 
            ORDER BY count DESC, category ASC
        `);

        console.log(`\n‚úÖ Encontradas ${categories.length} categor√≠as √∫nicas:`);
        console.log('‚ïê'.repeat(80));
        
        categories.forEach((cat, index) => {
            console.log(`${index + 1}. üìÇ ${cat.category}`);
            console.log(`   üìä ${cat.count} productos`);
            console.log(`   üîç C√≥digos ejemplo: ${cat.sample_codes.substring(0, 100)}${cat.sample_codes.length > 100 ? '...' : ''}`);
            console.log('');
        });

        console.log('‚ïê'.repeat(80));
        console.log(`üìà RESUMEN: ${categories.length} categor√≠as total`);
        
        // Buscar espec√≠ficamente LIQUIPOPS
        const [liquipops] = await pool.execute(`
            SELECT barcode, name FROM products 
            WHERE category LIKE '%LIQUIPOPS%' 
            LIMIT 5
        `);
        
        console.log(`\nüîç Productos LIQUIPOPS encontrados: ${liquipops.length}`);
        liquipops.forEach(product => {
            console.log(`   - ${product.barcode}: ${product.name}`);
        });

        await pool.end();
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
        await pool.end();
        process.exit(1);
    }
}

debugAllCategories();
