const fs = require('fs');
const path = require('path');

function fixLogisticsController() {
    console.log('=== CORRIGIENDO CONTROLADOR DE LOG√çSTICA ===\n');
    
    const controllerPath = path.join(__dirname, 'backend', 'controllers', 'logisticsController.js');
    
    try {
        let content = fs.readFileSync(controllerPath, 'utf8');
        
        console.log('1. Leyendo archivo actual...');
        
        // Buscar la funci√≥n getReadyForDeliveryOrders
        const functionStart = content.indexOf('const getReadyForDeliveryOrders = async (req, res) => {');
        if (functionStart === -1) {
            throw new Error('No se encontr√≥ la funci√≥n getReadyForDeliveryOrders');
        }
        
        console.log('2. Funci√≥n getReadyForDeliveryOrders encontrada');
        
        // CORRECCI√ìN 1: Cambiar la query para incluir pedidos en reparto
        const originalQuery = `WHERE o.status IN ('listo_para_entrega', 'empacado', 'listo')`;
        const newQuery = `WHERE o.status IN ('listo_para_entrega', 'empacado', 'listo', 'en_reparto')`;
        
        if (content.includes(originalQuery)) {
            content = content.replace(originalQuery, newQuery);
            console.log('‚úÖ Query corregida para incluir pedidos en reparto');
        } else {
            console.log('‚ö†Ô∏è  Query original no encontrada, buscando alternativas...');
        }
        
        // CORRECCI√ìN 2: Agregar informaci√≥n del mensajero en la consulta
        const originalSelect = `SELECT 
        o.id, o.order_number, o.customer_name, o.status, o.delivery_method,
        o.total_amount, o.created_at, o.updated_at, o.carrier_id,
        c.name as carrier_name`;
        
        const newSelect = `SELECT 
        o.id, o.order_number, o.customer_name, o.status, o.delivery_method,
        o.total_amount, o.created_at, o.updated_at, o.carrier_id,
        o.assigned_messenger_id, o.messenger_status,
        c.name as carrier_name,
        u.username as messenger_username, u.full_name as messenger_full_name`;
        
        if (content.includes(originalSelect)) {
            content = content.replace(originalSelect, newSelect);
            console.log('‚úÖ SELECT corregido para incluir informaci√≥n del mensajero');
        }
        
        // CORRECCI√ìN 3: Agregar LEFT JOIN con users para obtener datos del mensajero
        const originalFrom = `FROM orders o
       LEFT JOIN carriers c ON o.carrier_id = c.id`;
        
        const newFrom = `FROM orders o
       LEFT JOIN carriers c ON o.carrier_id = c.id
       LEFT JOIN users u ON o.assigned_messenger_id = u.id`;
        
        if (content.includes(originalFrom)) {
            content = content.replace(originalFrom, newFrom);
            console.log('‚úÖ LEFT JOIN con users agregado');
        }
        
        // CORRECCI√ìN 4: Mejorar la l√≥gica de agrupamiento para incluir pedidos con mensajero
        const groupingLogic = `// Normalizar texto para comparaci√≥n (quitar acentos y convertir a min√∫sculas)
      const normalizeText = (text) => {
        if (!text) return '';
        return text.toLowerCase()
                  .replace(/√°/g, 'a')
                  .replace(/√©/g, 'e') 
                  .replace(/√≠/g, 'i')
                  .replace(/√≥/g, 'o')
                  .replace(/√∫/g, 'u')
                  .replace(/√±/g, 'n')
                  .trim();
      };
      
      const normalizedCarrier = normalizeText(carrier_name);
      const normalizedMethod = normalizeText(delivery_method);`;
      
        const improvedGroupingLogic = `// Normalizar texto para comparaci√≥n (quitar acentos y convertir a min√∫sculas)
      const normalizeText = (text) => {
        if (!text) return '';
        return text.toLowerCase()
                  .replace(/√°/g, 'a')
                  .replace(/√©/g, 'e') 
                  .replace(/√≠/g, 'i')
                  .replace(/√≥/g, 'o')
                  .replace(/√∫/g, 'u')
                  .replace(/√±/g, 'n')
                  .trim();
      };
      
      const normalizedCarrier = normalizeText(carrier_name);
      const normalizedMethod = normalizeText(delivery_method);
      
      // Agregar informaci√≥n del mensajero si est√° asignado
      if (order.assigned_messenger_id && order.messenger_username) {
        order.messenger_info = {
          id: order.assigned_messenger_id,
          username: order.messenger_username,
          full_name: order.messenger_full_name
        };
      }`;
        
        if (content.includes(groupingLogic)) {
            content = content.replace(groupingLogic, improvedGroupingLogic);
            console.log('‚úÖ L√≥gica de agrupamiento mejorada para incluir info del mensajero');
        }
        
        // CORRECCI√ìN 5: Mejorar la condici√≥n para mensajer√≠a local con mensajeros asignados
        const originalMensajeriaCondition = `} else if (normalizedMethod === 'mensajeria_local' || normalizedMethod === 'mensajero' || 
                 normalizedCarrier.includes('mensajeria') || normalizedCarrier === 'mensajeria local' ||
                 normalizedCarrier.includes('mensajero')) {
        // Si es mensajer√≠a local, agregar a la categor√≠a correspondiente
        groupedOrders.mensajeria_local.push(order);
      } else if (!normalizedMethod && !normalizedCarrier) {
        // Si no tiene m√©todo ni transportadora, tambi√©n va a mensajer√≠a local
        groupedOrders.mensajeria_local.push(order);`;
        
        const improvedMensajeriaCondition = `} else if (normalizedMethod === 'mensajeria_local' || normalizedMethod === 'mensajero' || 
                 normalizedCarrier.includes('mensajeria') || normalizedCarrier === 'mensajeria local' ||
                 normalizedCarrier.includes('mensajero') || order.assigned_messenger_id) {
        // Si es mensajer√≠a local o tiene mensajero asignado, agregar a la categor√≠a correspondiente
        groupedOrders.mensajeria_local.push(order);
      } else if (!normalizedMethod && !normalizedCarrier) {
        // Si no tiene m√©todo ni transportadora, tambi√©n va a mensajer√≠a local
        groupedOrders.mensajeria_local.push(order);`;
        
        if (content.includes(originalMensajeriaCondition)) {
            content = content.replace(originalMensajeriaCondition, improvedMensajeriaCondition);
            console.log('‚úÖ Condici√≥n de mensajer√≠a local mejorada para incluir pedidos con mensajero');
        }
        
        // Guardar el archivo corregido
        fs.writeFileSync(controllerPath, content, 'utf8');
        
        console.log('\n‚úÖ CORRECCIONES APLICADAS:');
        console.log('  1. Incluir pedidos en estado "en_reparto"');
        console.log('  2. Agregar informaci√≥n del mensajero en la consulta');
        console.log('  3. JOIN con tabla users para obtener datos del mensajero');
        console.log('  4. Mejorar l√≥gica de agrupamiento');
        console.log('  5. Incluir pedidos con mensajero asignado en mensajer√≠a local');
        
        console.log('\nüìù ARCHIVO ACTUALIZADO:', controllerPath);
        console.log('\nüîÑ AHORA EL FRONTEND DEBER√çA MOSTRAR:');
        console.log('   - Pedidos en reparto con sus mensajeros asignados');
        console.log('   - El pedido de Ximena deber√≠a aparecer en "mensajeria_local"');
        console.log('   - Informaci√≥n del mensajero (mensajero1 - Ana Rodr√≠guez)');
        
    } catch (error) {
        console.error('‚ùå Error aplicando correcciones:', error.message);
    }
}

fixLogisticsController();
