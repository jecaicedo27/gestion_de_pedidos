const mysql = require('mysql2/promise');

const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'gestion_pedidos_dev',
    port: process.env.DB_PORT || 3306
};

async function fixBarcodesWithUniquePendiente() {
    try {
        console.log('üîß Conectando a la base de datos...');
        const connection = await mysql.createConnection(dbConfig);
        
        console.log('üîç Buscando c√≥digos de barras generados autom√°ticamente...');
        
        // Encontrar todos los productos con c√≥digos de barras num√©ricos de 13 d√≠gitos que empiecen con "77"
        const [generatedBarcodes] = await connection.execute(`
            SELECT id, product_name, barcode, siigo_product_id
            FROM products 
            WHERE barcode REGEXP '^77[0-9]{11}$'
            AND LENGTH(barcode) = 13
            ORDER BY id ASC
        `);
        
        if (generatedBarcodes.length === 0) {
            console.log('‚úÖ No se encontraron c√≥digos de barras generados autom√°ticamente');
            await connection.end();
            return;
        }
        
        console.log(`‚ùå Encontrados ${generatedBarcodes.length} c√≥digos de barras generados autom√°ticamente`);
        console.log('üîß Cambiando a c√≥digos "PENDIENTE" √∫nicos...\n');
        
        let updatedCount = 0;
        
        for (const product of generatedBarcodes) {
            try {
                // Crear c√≥digo √∫nico usando PENDIENTE + ID del producto
                const uniquePendingCode = `PENDIENTE_${product.id.toString().padStart(6, '0')}`;
                
                // Actualizar el c√≥digo de barras
                await connection.execute(`
                    UPDATE products 
                    SET barcode = ?
                    WHERE id = ?
                `, [uniquePendingCode, product.id]);
                
                console.log(`‚úÖ Producto ID ${product.id}: "${product.product_name}"`);
                console.log(`   üìß Cambio: ${product.barcode} ‚Üí ${uniquePendingCode}\n`);
                
                updatedCount++;
                
            } catch (productError) {
                console.error(`‚ùå Error actualizando producto ${product.id}:`, productError.message);
            }
        }
        
        console.log(`\nüèÅ Actualizaci√≥n completada:`);
        console.log(`   ‚úÖ Productos actualizados: ${updatedCount}`);
        console.log(`   üìä Total procesados: ${generatedBarcodes.length}`);
        
        // Verificar estado final
        const [finalCount] = await connection.execute(`
            SELECT COUNT(*) as count
            FROM products 
            WHERE barcode LIKE 'PENDIENTE_%'
        `);
        
        console.log(`üìà Total productos con c√≥digo "PENDIENTE_*": ${finalCount[0].count}`);
        
        await connection.end();
        console.log('\nüéâ Proceso completado exitosamente');
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
        process.exit(1);
    }
}

// Ejecutar correcci√≥n
fixBarcodesWithUniquePendiente();
